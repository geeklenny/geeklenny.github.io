{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":1,"renderable":0},{"_id":"source/diagrams/test-diagram-0.png","path":"diagrams/test-diagram-0.png","modified":1,"renderable":0},{"_id":"source/diagrams/test-diagram-1.png","path":"diagrams/test-diagram-1.png","modified":1,"renderable":0},{"_id":"source/images/201611/lennybaiwebsite.jpg","path":"images/201611/lennybaiwebsite.jpg","modified":1,"renderable":0},{"_id":"themes/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/12avatar.gif","path":"images/12avatar.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/alipay.jpg","path":"images/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/avatar.png","path":"images/avatar.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/lennybaiwebsite.png","path":"images/lennybaiwebsite.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/wechatpay.jpg","path":"images/wechatpay.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"c4ffd2fe7ea8b86234bf7462990c333d59394761","modified":1478252360609},{"_id":"source/baidu_verify_wBa8vF3BPm.html","hash":"9f6fdd158bded29efea2976e1e66e7201c95232b","modified":1478487662340},{"_id":"source/favicon.ico","hash":"9ee20ffe17a8ad7435b432ff1031630bc01e3199","modified":1478487192832},{"_id":"source/robots.txt","hash":"da3860b889698f3cc5f10dc1bedde73ae433dc71","modified":1478431375114},{"_id":"themes/hexo-theme-next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1478229513440},{"_id":"themes/hexo-theme-next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1478229513444},{"_id":"themes/hexo-theme-next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1478229513444},{"_id":"themes/hexo-theme-next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1478229513444},{"_id":"themes/hexo-theme-next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1478229513444},{"_id":"themes/hexo-theme-next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1478229513444},{"_id":"themes/hexo-theme-next/_config.yml","hash":"b33de4bbf7f31f2fd3a02985762d8c43a585b4a6","modified":1479114703305},{"_id":"themes/hexo-theme-next/bower.json","hash":"023b5b945bc45c205129a18e26d304fb9caa15c7","modified":1478229513444},{"_id":"themes/hexo-theme-next/gulpfile.coffee","hash":"d267332ec1461042fb16a9cb0737e1555fb4b79e","modified":1478229513444},{"_id":"themes/hexo-theme-next/package.json","hash":"0d43e71169c5e08917e73cd12aa79562c836712e","modified":1478229513448},{"_id":"themes/hexo-theme-next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1478229513440},{"_id":"source/_posts/了解c-11.md","hash":"bdc88ee591d1b6d9ab42d487c157e55f5ff0bd59","modified":1479443347296},{"_id":"source/diagrams/test-diagram-0.png","hash":"0341d9ec6b1a04884c9853021d135c4bef3b699e","modified":1478833467239},{"_id":"source/diagrams/test-diagram-1.png","hash":"1ba86b8ddefc6510ca51005fe6c3df59153c15b5","modified":1478833467139},{"_id":"source/categories/index.md","hash":"dfaa8a37ca516e92106bb05fa67d7c14e99a8c09","modified":1478264836566},{"_id":"source/guestbook/index.md","hash":"38ab6ac05b37d7462f98d6df70f1f22e73e81fb6","modified":1478254259026},{"_id":"source/tags/index.md","hash":"869cb232414ec4f1dae72088e121cb56310b3919","modified":1478264767147},{"_id":"themes/hexo-theme-next/languages/de.yml","hash":"786afba25cfc98845a20d9901823ebeebcd1cbbf","modified":1478229513444},{"_id":"themes/hexo-theme-next/languages/default.yml","hash":"9db835c0543ade5a89bc80ec5a898203227cf3d8","modified":1478229513444},{"_id":"themes/hexo-theme-next/languages/en.yml","hash":"63de36e9f5822084b61b03a507f6246f8f962b3f","modified":1478229513444},{"_id":"themes/hexo-theme-next/languages/fr-FR.yml","hash":"1a084623c39de74301f3e92f9388a3a815a542ca","modified":1478229513444},{"_id":"themes/hexo-theme-next/languages/id.yml","hash":"147c01e41b931085ad14250fa900c2249dcbbdd7","modified":1478229513444},{"_id":"themes/hexo-theme-next/languages/ja.yml","hash":"a2c7b6301b5474aab798946fb700289df237c3cf","modified":1478229513444},{"_id":"themes/hexo-theme-next/languages/ko.yml","hash":"ce8b047c89daae77c03482fc76f16ffec6bdbf2d","modified":1478229513444},{"_id":"themes/hexo-theme-next/languages/pt-BR.yml","hash":"462aa865ca3d479bcf6b363cba61247b50f230ff","modified":1478229513444},{"_id":"themes/hexo-theme-next/languages/pt.yml","hash":"ca239b39bf65c9462e59d51b12f0fe566d453197","modified":1478229513444},{"_id":"themes/hexo-theme-next/languages/ru.yml","hash":"cc7b964a46587aea0e57b0a5269d8fd25570858e","modified":1478229513444},{"_id":"themes/hexo-theme-next/languages/zh-Hans.yml","hash":"6b3dc7bd7fba96e6a69b13b7b00bcd2a75c468df","modified":1478243295934},{"_id":"themes/hexo-theme-next/languages/zh-hk.yml","hash":"519ab3d817ec3bc5bfc91159c494b6b3c170bea7","modified":1478229513444},{"_id":"themes/hexo-theme-next/languages/zh-tw.yml","hash":"6b1f345aaefc13e6723dc8a6741b59ac05c20dfd","modified":1478229513444},{"_id":"themes/hexo-theme-next/layout/_layout.swig","hash":"e1b85f9cc22209de31fd13e3cc8dcbbe8ccd70b7","modified":1478366865520},{"_id":"themes/hexo-theme-next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1478229513448},{"_id":"themes/hexo-theme-next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1478229513448},{"_id":"themes/hexo-theme-next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1478229513448},{"_id":"themes/hexo-theme-next/layout/page.swig","hash":"8019d02232a6dd1a665b6a4d2daef8e5dd2f0049","modified":1478248930480},{"_id":"themes/hexo-theme-next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1478229513448},{"_id":"themes/hexo-theme-next/layout/schedule.swig","hash":"1f1cdc268f4ef773fd3ae693bbdf7d0b2f45c3a3","modified":1478229513448},{"_id":"themes/hexo-theme-next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1478229513448},{"_id":"themes/hexo-theme-next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1478229513448},{"_id":"themes/hexo-theme-next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1478229513472},{"_id":"themes/hexo-theme-next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1478229513472},{"_id":"themes/hexo-theme-next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1478229513472},{"_id":"themes/hexo-theme-next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1478229513456},{"_id":"source/images/201611/lennybaiwebsite.jpg","hash":"83470eeec7e3af004eb3e8e560ed2504f4018623","modified":1478577955948},{"_id":"themes/hexo-theme-next/layout/_macro/mobile-code.swig","hash":"6987e11ce13dfe32f42f6e250b46d17276fb8e82","modified":1478330631639},{"_id":"themes/hexo-theme-next/layout/_macro/passage-end-tag.swig","hash":"3f5a4fdcb23061f9258a429000aa71d5134d8bd9","modified":1478309788596},{"_id":"themes/hexo-theme-next/layout/_macro/post-collapse.swig","hash":"bc311e9f4333188da5c9c721ae467ba14410d5b2","modified":1478229513444},{"_id":"themes/hexo-theme-next/layout/_macro/post.swig","hash":"8c6d320dfa371a45acb7699f1716dc4db6fbe6fc","modified":1478309851023},{"_id":"themes/hexo-theme-next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1478229513444},{"_id":"themes/hexo-theme-next/layout/_macro/sidebar.swig","hash":"084867c289c95c5ebc18435a3b2092091bb8e2ba","modified":1478229513444},{"_id":"themes/hexo-theme-next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1478229513444},{"_id":"themes/hexo-theme-next/layout/_partials/comments.swig","hash":"58fd826ca75b0cbc48b61a58da4b841e2fa34403","modified":1478229513444},{"_id":"themes/hexo-theme-next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1478229513444},{"_id":"themes/hexo-theme-next/layout/_partials/footer.swig","hash":"053a1ef38d1eeb5ba92579d1353fbeec7d192044","modified":1478306321023},{"_id":"themes/hexo-theme-next/layout/_partials/head.swig","hash":"06b6604176367af52587312e2575b52ecf53c3d9","modified":1478229513444},{"_id":"themes/hexo-theme-next/layout/_partials/header.swig","hash":"eb028685cb3c329537bbced06c063d23e6a33817","modified":1478229513444},{"_id":"themes/hexo-theme-next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1478229513444},{"_id":"themes/hexo-theme-next/layout/_partials/search.swig","hash":"011b9d6c9f0a2f4654908ea20b9391f9b7981271","modified":1478229513444},{"_id":"themes/hexo-theme-next/layout/_scripts/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1478229513448},{"_id":"themes/hexo-theme-next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1478229513448},{"_id":"themes/hexo-theme-next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1478229513448},{"_id":"themes/hexo-theme-next/layout/_scripts/vendors.swig","hash":"0b91cadecead8e0b5211cc42b085998d94af503a","modified":1478229513448},{"_id":"themes/hexo-theme-next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1478229513448},{"_id":"themes/hexo-theme-next/scripts/tags/full-image.js","hash":"3acce36db0feb11a982c6c799aa6b6b47df2827c","modified":1478229513448},{"_id":"themes/hexo-theme-next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1478229513448},{"_id":"themes/hexo-theme-next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1478229513456},{"_id":"themes/hexo-theme-next/source/images/12avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1478229513456},{"_id":"themes/hexo-theme-next/source/images/alipay.jpg","hash":"fe821a90e261f657dd9f7df0f05c19d9622f6264","modified":1478404983375},{"_id":"themes/hexo-theme-next/source/images/avatar.png","hash":"ef09de6175d3c5835456dd76e0f66b211d65f1f0","modified":1478221386374},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1478229513456},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1478229513456},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1478229513456},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1478229513456},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1478229513456},{"_id":"themes/hexo-theme-next/source/images/avatar.jpg","hash":"2a77ea96b0a06aee4af83a1d66ae865283b505e7","modified":1478403305241},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1478229513456},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1478229513456},{"_id":"themes/hexo-theme-next/source/images/lennybaiwebsite.png","hash":"43a4dcd12d28502fd4058b37c72ebf9da2a6d715","modified":1479186483460},{"_id":"themes/hexo-theme-next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1478229513456},{"_id":"themes/hexo-theme-next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1478229513456},{"_id":"themes/hexo-theme-next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1478229513456},{"_id":"themes/hexo-theme-next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1478229513456},{"_id":"themes/hexo-theme-next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1478229513456},{"_id":"themes/hexo-theme-next/source/images/wechatpay.jpg","hash":"e0dba993f47c42b19b60fc29aef61c756d6dae79","modified":1478404399414},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1478229513448},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1478229513448},{"_id":"themes/hexo-theme-next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1478229513452},{"_id":"themes/hexo-theme-next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1478229513452},{"_id":"themes/hexo-theme-next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1478229513456},{"_id":"themes/hexo-theme-next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1478229513456},{"_id":"themes/hexo-theme-next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1478229513456},{"_id":"themes/hexo-theme-next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1478229513444},{"_id":"themes/hexo-theme-next/layout/_partials/search/localsearch.swig","hash":"10683fe1241ed75ca0aae6c3096bf27acbea6f74","modified":1478305952979},{"_id":"themes/hexo-theme-next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1478229513444},{"_id":"themes/hexo-theme-next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1478229513444},{"_id":"themes/hexo-theme-next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1478229513444},{"_id":"themes/hexo-theme-next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1478229513444},{"_id":"themes/hexo-theme-next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1478229513444},{"_id":"themes/hexo-theme-next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1478229513444},{"_id":"themes/hexo-theme-next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1478229513448},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1478229513448},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/analytics.swig","hash":"0a89c04055bade7baa5962f1d5aefe438d83a244","modified":1478229513448},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/comments.swig","hash":"907b931d775d32405d02a25b3b0a3ac03bf804d0","modified":1478229513448},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/lean-analytics.swig","hash":"a08d45cf6da12bff0db95c68e0cc66c81e006bb2","modified":1478239135686},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/localsearch.swig","hash":"dc8023c524594b6b85905c776899f5f53973577f","modified":1478229513448},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/mathjax.swig","hash":"5bafc33f57508d1d04a9930165240f6e9efa8d6d","modified":1478229513448},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1478229513448},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1478229513448},{"_id":"themes/hexo-theme-next/source/css/_custom/custom.styl","hash":"149d528e967651b4442672e0bbbc78efd2c92392","modified":1478498019058},{"_id":"themes/hexo-theme-next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1478229513456},{"_id":"themes/hexo-theme-next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1478229513456},{"_id":"themes/hexo-theme-next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1478229513456},{"_id":"themes/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"3ead77befa064d6327dc7afd0a5af7be59a5f196","modified":1478229513456},{"_id":"themes/hexo-theme-next/source/css/_variables/base.styl","hash":"c5a4d367d706e7981ed9fb01ed0fe172ad5e3d27","modified":1478318599739},{"_id":"themes/hexo-theme-next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1478229513456},{"_id":"themes/hexo-theme-next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1478229513456},{"_id":"themes/hexo-theme-next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1478229513456},{"_id":"themes/hexo-theme-next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1478229513456},{"_id":"themes/hexo-theme-next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1478229513456},{"_id":"themes/hexo-theme-next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1478229513456},{"_id":"themes/hexo-theme-next/source/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1478229513456},{"_id":"themes/hexo-theme-next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1478229513456},{"_id":"themes/hexo-theme-next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1478229513456},{"_id":"themes/hexo-theme-next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1478229513460},{"_id":"themes/hexo-theme-next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1478229513460},{"_id":"themes/hexo-theme-next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1478229513460},{"_id":"themes/hexo-theme-next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1478229513460},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.bower.json","hash":"7da985a99674e54f514d4fd9fcd3bcea6e7e41d5","modified":1478229513460},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1478229513460},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1478229513460},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1478229513460},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1478229513460},{"_id":"themes/hexo-theme-next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1478229513468},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1478229513468},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1478229513468},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1478229513468},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1478229513468},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1478229513468},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1478229513468},{"_id":"themes/hexo-theme-next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1478229513468},{"_id":"themes/hexo-theme-next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1478229513468},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1478229513472},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1478229513472},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1478229513472},{"_id":"themes/hexo-theme-next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1478229513468},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1478229513448},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1478229513448},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1478229513448},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1478229513448},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1478229513448},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1478229513448},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/comments/disqus.swig","hash":"3065c1bcb54da1e0018136595741341ac71ef9e7","modified":1478229513448},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"696666141cdd204fd8818ac2ad18f05e320f8587","modified":1478229513448},{"_id":"themes/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1478229513448},{"_id":"themes/hexo-theme-next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1478229513448},{"_id":"themes/hexo-theme-next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1478229513448},{"_id":"themes/hexo-theme-next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1478229513448},{"_id":"themes/hexo-theme-next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1478229513452},{"_id":"themes/hexo-theme-next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1478229513452},{"_id":"themes/hexo-theme-next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1478229513452},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1478229513452},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1478229513452},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1478229513452},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1478229513452},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1478229513452},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1478229513456},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"b3448da168dee8ababcdfd44b0d44ba4b5f32107","modified":1478367604272},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1478229513456},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1478229513456},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1478229513456},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1478229513456},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"fb1fe1e86e9198ea470dbd8de2bb13ef21e30a45","modified":1478306234728},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1478229513456},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"c2c6c4f6434b4f94aac2af5861cd769427f0ee10","modified":1478229513456},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1478229513456},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1478229513456},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1478229513456},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/__logo.styl","hash":"bdd5d6715d3739213ced1714e03e32df81cc1f9d","modified":1478268506618},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_brand.styl","hash":"be22ad34f546a07f6d56b424338cdd898683eea4","modified":1478229513456},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1478229513456},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"7b206cd8921bc042f8e37a74aea1abc8a5ec8ab4","modified":1478229513456},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1478229513456},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1478229513456},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d4b7bd610ca03dbb2f5b66631c0e84a79fb4660b","modified":1478229513456},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1478268613711},{"_id":"themes/hexo-theme-next/source/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1478229513456},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1478229513456},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1478229513456},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1478229513456},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1478229513456},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1478229513456},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1478229513456},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1478229513460},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1478229513460},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1478229513460},{"_id":"themes/hexo-theme-next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1478229513460},{"_id":"themes/hexo-theme-next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1478229513460},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1478229513460},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1478229513460},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1478229513460},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1478229513468},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1478229513468},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1478229513468},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1478229513460},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1478229513464},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1478229513468},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1478229513472},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1478229513448},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1478229513448},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1478229513448},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/site-meta.styl","hash":"314c7237be7e2e727710179be6021a76a5983d0b","modified":1478367436632},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1478229513448},{"_id":"themes/hexo-theme-next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1478229513448},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1478229513448},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/highlight.styl","hash":"d23db2f598b8eb274680023745ba6d6d466cd84a","modified":1478229513452},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/theme.styl","hash":"90f8f9706cd7fe829cf06e9959a65fd3f8b994fa","modified":1478229513452},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1478229513452},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1478229513452},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1478229513452},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1478229513452},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1478229513452},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1478229513452},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1478229513452},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1478229513452},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1478229513452},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-meta.styl","hash":"d543d1377c1f61b70e3adb6da0eb12797552e5f2","modified":1478229513452},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1478229513452},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"cbca4842a54950e2934b3b8f3cd940f122111aef","modified":1478229513452},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1478229513452},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1478229513452},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1478229513452},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1478229513452},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post.styl","hash":"14bc717d806d839930d72f62308ff73dd800ea4a","modified":1478309694966},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1478229513452},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1478229513452},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1478229513452},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1478229513452},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1478229513452},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1478229513452},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1478229513452},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1478229513452},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1478229513452},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1478229513452},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1478229513452},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1478229513452},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1478229513452},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/localsearch.styl","hash":"637c6b32c58ecf40041be6e911471cd82671919b","modified":1478229513452},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/third-party.styl","hash":"3afc459442c132c480d1d832f1a872f1070bb048","modified":1478229513452},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1478229513452},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1478229513452},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1478229513452},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/tags.styl","hash":"8e66c2635d48e11de616bb29c4b1323698eebc0a","modified":1478229513452},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1478229513456},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1478229513456},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1478229513456},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1478229513460},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1478229513460},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1478229513460},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1478229513460},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1478229513460},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1478229513460},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1478229513468},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1478229513464}],"Category":[{"name":"程序设计","_id":"civnaj77f0004n9ouq8v5uujd"},{"name":"c++11","parent":"civnaj77f0004n9ouq8v5uujd","_id":"civnaj77n0008n9ouluviz5kj"}],"Data":[],"Page":[{"_content":"wBa8vF3BPm","source":"baidu_verify_wBa8vF3BPm.html","raw":"wBa8vF3BPm","date":"2016-11-18T04:28:54.537Z","updated":"2016-11-07T03:01:02.340Z","path":"baidu_verify_wBa8vF3BPm.html","title":"","comments":1,"layout":"page","_id":"civnaj6zk0000n9oupz1f8w9n","content":"wBa8vF3BPm","excerpt":"","more":"wBa8vF3BPm"},{"title":"guestbook","date":"2016-11-04T07:05:44.000Z","_content":"\n<div class=\"ds-recent-visitors\" data-num-items=\"28\"\n     data-avatar-size=\"42\" id=\"ds-recent-visitors\"/>\n","source":"guestbook/index.md","raw":"---\ntitle: guestbook\ndate: 2016-11-04 15:05:44\n---\n\n<div class=\"ds-recent-visitors\" data-num-items=\"28\"\n     data-avatar-size=\"42\" id=\"ds-recent-visitors\"/>\n","updated":"2016-11-04T10:10:59.026Z","path":"guestbook/index.html","comments":1,"layout":"page","_id":"civnaj7790002n9oukrayfy1l","content":"<div class=\"ds-recent-visitors\" data-num-items=\"28\" data-avatar-size=\"42\" id=\"ds-recent-visitors\">\n</div>","excerpt":"","more":"<div class=\"ds-recent-visitors\" data-num-items=\"28\"\n     data-avatar-size=\"42\" id=\"ds-recent-visitors\"/>\n"},{"title":"categories","date":"2016-11-04T07:28:15.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-11-04 15:28:15\ntype: categories\ncomments: false\n---\n","updated":"2016-11-04T13:07:16.566Z","path":"categories/index.html","layout":"page","_id":"civnaj77c0003n9ou83i7bx9a","content":"","excerpt":"","more":""},{"title":"tags","date":"2016-11-04T07:28:25.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-11-04 15:28:25\ntype: tags\ncomments: false\n---\n","updated":"2016-11-04T13:06:07.147Z","path":"tags/index.html","layout":"page","_id":"civnaj77i0006n9oue9txehmx","content":"","excerpt":"","more":""}],"Post":[{"title":"了解c++11","comments":0,"date":"2016-11-14T06:48:10.000Z","_content":"\n# 一、简介\n\n　　起草本文的目的主要有两点：第一点，在c++11学习的过程中做一些摘要总结，尽量取其精华，为自己梳理出来一个比较清晰的记忆脉络；第二点，不得不说的就是随着年纪的增长，记忆力也开始变得并不那么可靠，做些记录，定期回头看看总是好的。\n　　文章会对c++11（其实是c++1x更准确些）的背景进行简要的概述，并尽量详细且准确的阐述c++11的新的特性。共同学习，不断进步。\n## 1.1 c++11概述\n　　我们生活中常常谈论的c++更多的是指传统c++，又或是可以称为c++98的版本。c++11也并不是什么神秘的新语言，而是基于传统c++发布13年后的第一次重大修订。它主要基于现在软件行业发展的新需求与新诉求进行的一种调整——增加新特性并弃用部分特性。\n\n<!--more-->\n\n## 1.2 文章小贴士\n### 1.2.1 笔者开发运行环境\n```bash\n> lennybai@lennybai~$ lsb_release -a\n> No LSB modules are available.\n> Distributor ID:\tUbuntu\n> Description:\tUbuntu 16.04.1 LTS\n> Release:\t16.04\n> Codename:\txenial\n\n> lennybai@lennybai:~$ g++ --version\n> g++ (Ubuntu 5.4.0-6ubuntu1~16.04.4) 5.4.0 20160609\n> Copyright (C) 2015 Free Software Foundation, Inc.\n> This is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n```\n### 1.2.2 小贴士\n> g++ main.cpp -std=c++11　　\n\n若使用c++11，请记得添加编译选项\n\n### 1.2.3 原创提醒\n　　本文主要目的在于个人学习与记录，如果能够有幸帮助到同样在修行的同僚那自然是件幸事，引用还望注明出处。笔者在写作过程中也会大量的阅读各种文章以增强理解，当然，会尽最大可能去注明文章引用，如果存在问题，希望指正。\n\n***\n\n# 二、正篇\n　　对于学习新东西，我的习惯一般都是先google或者baidu看大量的博客来给自己洗脑，让自己有一定的知识轮廓。接下来就会开始啃官方文档，或者阅读刚刚浏览过的博客中推荐的各种书籍。当然，如果有个不错的视频教程让自己快进着点一点最好不过了，很多效果一目了然。\n\n　　在stackoverflow上，有人给出了不错的[书籍大纲](http://stackoverflow.com/a/388282)，这些对于积累知识的初学者更有益。对于那些对于传统c++已经很熟悉，只是希望快速的了解c++11的新特性，并择机使用的选手来说，实验楼的[《C++ 11/14 高速上手教程》](https://www.shiyanlou.com/courses/605/labs/2022/document)免费在线课程可能会更有帮助。\n\n　　本文主要基于实验楼的课程大纲进行整理，并进行部分知识点的拓展完善。\n\n## 2.1 弃用(deprecated)特性\n　　c++11提及到部分弃用特性。这里弃用并不等于废除并从标准中移除，而是警醒程序员在使用c++的时候能够意识到某些特性应避免使用。其实可能为了保证兼容性，这些特性可能永远不会被剔除出去（通常情况下是在编译的时，会显示一个弃用的warning），依旧可以被使用。\n```bash\nlennybai@lennybai:~/Desktop/cpp11$ g++ main.cpp -std=c++11\nmain.cpp: In function ‘int main()’:\nmain.cpp:7:15: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]\n     char* a = \"hello world\";\n\n```\n　　但是我们应该尽量遵循语言的发展与变迁，适当的改变自己对语言的使用方式。一个不恰当的例子，就好比黑白彩电置于当今社会，依然可以被使用，但是有更好的选择时为什么不去尝试呢？\n\n### 2.1.1 被移除或者弃用的特性\n\n> * std::auto_ptr 被 std::unique_ptr 取代。\n> * exception specifications\n> * bool 类型的 ++ 操作被弃用。\n> * export: 用法已被去掉,但关键字还是被保留了,给将来可能的特性使用\n> * 函数对象的基类(std::unary_function, std::binary_function)、函数指针适配器、类型成员指针适配器以及绑定器 (binder)。\n> * [顺序点](http://www.cnblogs.com/dolphin0520/archive/2011/04/20/2022330.html) (sequence point): 这个术语正被更为易懂的描述所取代。一个运算可以发生 (is sequenced before) 在另一个运算之前; 又或者两个运算彼此之间没有顺序关系 (are unsequenced)。\n\n　　就像前面提到的，被弃用的特性应该引起一定的重视。这里主要参考维基百科上面提到的内容列出了一些已经被弃用的特性。在以后的学习过程中也会不断完善这一部分。\n\n## 2.2 新特性\n　　对于c++11的新特性应该是阅读本文的客官们更关心的。c++11新特性包括但不完全是：lambda表达式，类型推断关键字auto、decltype和对模板的大量改进。在这一章节我们进行详细阐述。\n\n### 2.2.1 自动类型推断（auto/decltype）\n　　对于传统c++而言，变量的类型都必须明确定义。虽然已经习惯传统c++编程的朋友们在声明或者定义基本类型(如int、char等)的变量时，并没有太多不妥的感觉。然而，可能也会在使用复杂模板时，觉得代码有点又丑又长。比如常见的迭代器声明:\n```cpp\nfor ( map < int,UserDefClass<userDefTemptype> >::iterator itr= userMap.begin(); itr !=userMap.end(); ++itr)\n```\n　　这里我列出了一个比较夸张的例子，目的是希望指出自动类型推断存在的意义。它其实已经很普遍的存在于现代编程语言之中(如python, javascript等脚本语言)。而在c++11中，通过对传统c++中auto关键字的修改得到自动类型推断的支持。\n　　auto关键字在传统c++中用来指定存储期，一般用于指明具有自动生命周期的变量。最常见的就是函数内的局部变量。编译器在做编译时，对一般不是static修饰的变量，则默认赋予auto类型，所以auto关键字几乎很少被使用。在传统c++中，auto关键字的使用方法如下：\n```cpp\nauto int a;\n```\n　　而在c++11中，auto的功能变为了类型自动推断,编译器会根据初始代码推断所声明变量的真实类型。将类型判断的工作由程序员交给了编译器，这样，在一定程度提高了代码开发的效率。而且，大部分情况下会直观的发现，代码变的更简短(当然int类型还是要比auto少一个字符)。这里是使用auto对上面繁重代码的优化:\n```cpp\nfor ( auto itr= userMap.begin(); itr !=userMap.end(); ++itr)\n```\n　　有没有很酷！接下来我们来看一下auto的具体使用，来更详细的了解一下它的功能。同时，也要学习一下它的使用规则。auto在c++11中，最容易理解的使用方式莫过于变量定义时的类型推断:\n```cpp\nauto a = 10;\nauto b = 'A';\nauto c(\"hello\");\ncout << \"a:\" << typeid(a).name() << endl;    　// “a:i”\ncout << \"b:\" << typeid(b).name() << endl;    　// \"b:c\"\ncout << \"c:\" << typeid(c).name() << endl;    　// \"c:PKc\"\n```\n　　这里我们可以看到，对于变量可以不用明确的去定义其类型，而是用auto代替。其最终效果与传统c++的变量定义效果没有差别。这里可以通过typeid函数进行验证(#include< typeinfo >).\n　　在很多对于auto的讲解中，它常常被称作占位符。所谓占位符，我的理解是它不能像数据类型那样去声明一个变量。所以使用auto的变量必须进行初始化。理所当然的，也就不能使用c++类型转化将变量转换为auto类型。\n```cpp\nauto a;         //error: declaration of ‘auto a’ has no initializer\n\nint value1 = 10;\nauto value2 = (auto)value1;    // error: invalid use of ‘auto’\nauto value3 = static_cast<auto>(value１);    // error: invalid use of ‘auto’\n```\n　　c++11已经彻底废弃了原有auto的使用方式，如代码所示:\n```cpp\nauto int a = 10;  //error: two or more data types in declaration of ‘a’\n```\n　　auto可以接受c++的变量名表列的方式定义多个变量，但所有变量应具有相同的数据类型。\n```cpp\nauto a1=10, a2=20, a3=30;\nauto a4=10, a5=20.0, a6 = 'A';    // error: conflicting declaration\n```\n\n　　auto在初始化时，会自动去除引用、const、volatile的语意。这种说法可能很难理解。其实就是如果原始变量为引用、const、volatile类型，auto初始化时需要自行指明。\n```cpp\n\n    int refa = 10;\n    int &refb = refa;\n    auto refc = refb;\n    auto &refd = refb;\n    refa = 100;\n    cout << \"refa: \" << typeid(refa).name() << \" \" << refa << endl;    // 100\n    cout << \"refb: \" << typeid(refb).name() << \" \" << refb << endl;    // 100\n    cout << \"refc: \" << typeid(refc).name() << \" \" << refc << endl;    // 10\n    cout << \"refd: \" << typeid(refd).name() << \" \" << refd << endl;    // 100\n\n    int arrA[3] = { 1, 2, 3 };\n    auto arrB = arrA;\n    auto &refArrB = arrA;\n    cout << \"arrA: \" << typeid(arrA).name() << endl;    // A3_i\n    cout << \"arrB: \" << typeid(arrB).name() << endl;    //Pi\n    cout << \"refArrB: \" << typeid(refArrB).name() << endl;    // A3_i\n```\n\n　　auto关键字不仅可以配合变量使用，它在对传统c++函数的代码优化上也可以说是大放异彩。特别是针对那些具有模板类型的函数，更是让我们在编写时变的简单高效。我们来看第一个例子。这里我们在模板函数中使用auto定义了一个站位变量。这样就使得该变量在随着传入值的类型发生变化时，自动进行类型转换。是不是很方便。\n```cpp\ntemplate <typename _Tx,typename _Ty>\nvoid func(_Tx x, _Ty y)\n{\n    auto v = x*y;\n    cout << v << endl;\n}\n\n//call func\nfunc3(1,2);    // 2\nfunc3(1.1,2.2);    // 2.42\n```\n\n　　auto关键字可以在函数中使用，那我们自然会想到，它能不能作为函数的返回值占位符。c++11自然提供了这种机制。但是用法可能和我们预期有一定的差距。\n```cpp\nauto func(int x, int y)->int\n{\n    return x+y;\n}\n```\n\n　　在c++11中，这样的返回值看起来很奇葩。使用auto来标注函数返回值时，还需要在末尾指定返回类型。会不会觉得还不如不用auto类型。但我觉得制定标准的人肯定也会考虑到这个问题。自然就去搜索了一些相关内容:\n1. 在函数返回值特别长的时候放在末尾，会显得好看。\n2. c++14会把返回值去掉，让编译器直接支持自动推倒（c++14确实是做到了）\n3. 出现在函数后面的表达式在代码编译时也是出现在函数之后的，这就使得很多函数中的临时变量可以出现在这个表达式中。这个我们在后面的decltype使用中可以看到效果。(显然，这个才是我认为最重要的)\n\n```cpp\n//c++14　支持\nauto func(int x, int y)\n{\n    return x+y;\n}\n```\n\n　　这种auto作为函数返回值占位符的用法，会使编写复杂的模板函数时变得相当简单和灵活。\n\n```cpp\ntemplate <typename _Tx, typename _Ty>\nauto func(_Tx x, _Ty y) -> decltype(x*y)\n{\n    return x*y;\n}\n\n//call func\nauto funcA = func(1,2);\ncout << funcA << endl;    // 2\nfuncA = func(1.1,2.2);\ncout << funcA << endl;    // 2\nauto funcB = func(1.1,2.2);\ncout << funcB << endl;    // 2.42\n```\n\n  这里用到了decltype(declared type)，它可以用来通过传入的参数来声明类型。这样func这个模板函数的会很方便的随着模板传入类型来自动改变返回值类型。bravo！\n\n  decltype不存在太多的歧义，这里直接列出代码。\n\n```cpp\nint declint = 10;\ndecltype(declint) declintt;\n\nvector<int> vec;\ntypedef decltype(vec.begin()) vectype;\n\ndecltype(declint) temp1 = declint;\ndecltype((declint)) temp2 = declint; //decltype(())定义的是引用类型\ndecltype((declint)) temp3;    // error: ‘temp3’ declared as reference but not initialized\n```\n\n　　接下来我们说一下刚才我们提到的函数返回类型后置的问题。我们已经知道通过decltype可以根据传入参数获取最终的数据类型。那么我们将下面代码进行修改：\n\n```cpp\n// origin, ok~\ntemplate <typename _Tx, typename _Ty>\nauto func(_Tx x, _Ty y) -> decltype(x*y)\n{\n    return x*y;\n}\n```\n\n　　一般想法是认为，返回值不就是decltype(x*y)类型么？　那我们直接放前面不是更方便。好的，我们改写一下.\n\n```cpp\n// update\ntemplate <typename _Tx, typename _Ty>\ndecltype(x*y) func(_Tx x, _Ty y)\n{\n    return x*y;\n}\n```\n\n  然而：\n\n```bash\nlennybai@lennybai:~/project/cpp11$ g++ main.cpp -std=c++11\nmain.cpp:16:10: error: ‘x’ was not declared in this scope\n decltype(x*y) func4(_Tx x, _Ty y)\n          ^\nmain.cpp:16:10: error: ‘x’ was not declared in this scope\nmain.cpp:16:12: error: ‘y’ was not declared in this scope\n decltype(x*y) func4(_Tx x, _Ty y)\n            ^\n```\n\n　　是的，结果就是这么神奇。这也说明　’function->expr‘ 中的expr是出现在函数之后的。如果不使用auto占位符，而直接使用decltype(x*y)声明函数类型。由于x,y在函数运行前尚未明确类型，所以这里就会出现编译错误。\n\n　　在这一小节最后需要指出的是，auto是不能作为参数占位符出现的。\n\n```cpp\n// 客官不可以哦\nvoid func2(auto x)\n{\n     //do something\n}\n```\n### 2.2.2 指针空值nullptr\n　　在传统c++中，通常使用NULL来标识空指针。NULL通常是一个与0相关的宏定义。这里是/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h中对NULL的定义。\n```c++\n#if defined (_STDDEF_H) || defined (__need_NULL)\n#undef NULL\t\t/* in case <stdio.h> has defined it. */\n#ifdef __GNUG__\n#define NULL __null\n#else   /* G++ */\n#ifndef __cplusplus\n#define NULL ((void *)0)\n#else   /* C++ */\n#define NULL 0\n#endif  /* C++ */\n#endif  /* G++ */\n#endif\t/* NULL not defined and <stddef.h> or need NULL.  */\n#undef\t__need_NULL\n```\n　　我们发现在传统C++中，NULL被定义为0。由于没有类型限制，它可以被强制转换为各种其他数据类型。最常见的例子就是当出现函数重载时会发生混乱。\n```c++\nvoid func(int n) { cout << \"call func(int n) : \" << endl; };\nvoid func(int *p) { cout << \"call func(int *p) : \" << endl; };\n\nfunc(NULL); // error: call of overloaded ‘func(NULL)’ is ambiguous\n```\n　　为了区分不同类型的空指针，C++11引入了nullptr_t类型的指针空值nullptr。它可以自动隐性的转换为所需的成员指针或者函数指针的类型。从而使程序更加清晰明了。值得注意的是，nullptr只能用来标识指针类型。\n```c++\n#include <iostream>\nusing namespace std;\n\nvoid func(int n) { cout << \"call func(int n) : \" << endl; };\nvoid func(int *p) { cout << \"call func(int *p) : \" << endl; };\n\nint main()\n{\n    int nIntNull = NULL;        // ok\n    int *pIntNull = NULL;        // ok\n    int *pIntNullptr = nullptr;    // ok\n    int nIntNullptr = nullptr;    // error: cannot convert ‘std::nullptr_t’ to ‘int’ in initialization\n\n    func(NULL); // error: call of overloaded ‘func(NULL)’ is ambiguous\n    func(nullptr); // call func(int *p)\n\n    return 0;\n}\n```\n### 2.2.3 常量区分符constexpr\n　　常量表达式在c++中还是很常见的，特别是在数组或者容器等初始化时传入的大小通常为常量表达式。在C++中，常量表达式通常被解释为在编译时可以明确其值的表达式。最常见的常量表达式就是被const标识的变量：\n```c++\nint n = 1;\nstd::array<int, n> a1; // error, n is not a constant expression\nconst int cn = 2;\nstd::array<int, cn> a2; // OK, cn is a constant expression\n```\n　　其实，在我们进行程序设计的时候，常常会发现很多情况是需要根据运行情况去获取一个值，然后再进行数据或者容器大小的分配。而这些值我们在给定条件值之后，很容易就会被推导出来。而对于计算机来说，却需要在每次运行时不断重复相同的推倒工作。那么我们可能会觉得，如果可以像常量表达式那样在编译时就确定其值，是不是在运行时就可以得到更高的运行效率呢。c++为我们提供了常量区分符constexpr来实现这一效果。\n　　constexpr用来标示一个变量或者函数为常量表达式，也是告诉编译器需要去验证它们是不是一个常量表达式。\n```c++\nint x;\nstruct A {\n    constexpr A(bool b) : m(b?42:x) { }\n    int m;\n};\nconstexpr int v = A(true).m; // OK\nconstexpr int w = A(false).m; // error: non-const x\nconstexpr int mf = 20;          // 20是常量表达式\nconstexpr int limit = mf + 1;   // mf + 1是常量表达式\nconstexpr int sz = size();      // 只有当size是一个constexpr函数时才是一条正确的声明语句\n\nconstexpr int A()\n{\n    return 10;\n}\n\nconstexpr int fibonacci1(const int n) {\n    return n == 1 || n == 2 ? 1 : fibonacci1(n-1)+fibonacci1(n-2);\n}\n\n// c++11 error error: body of constexpr function ‘constexpr int fibonacci2(int)’ not a return-statement\n// c++14 OK\n constexpr int fibonacci2(const int n) {\n     if(n == 1) return 1;\n  　 if(n == 2) return 1;\n  　 return fibonacci2(n-1)+fibonacci2(n-2);\n}\n\nint i1 = 10;\nconst int i2 = i1;\nconst int i3 = 10;\nconstexpr int x1 = i1;    // error: the value of ‘i1’ is not usable in a constant expression\nconstexpr int x2 = i2;    // error: the value of ‘i2’ is not usable in a constant expression\nconstexpr int x3 = i3;    // ok\nconstexpr int x4 = 10;    // ok\nconstexpr int x5 = A();   // ok\nconstexpr int x6 = fibonacci1(10);    // ok\nconstexpr int x7 = cin.get(); // !error\nconstexpr int x8 = fibonacci2(10);\n\nint a[i2];    // ok\nint b[x4];    // ok\n```\n　　从上面的代码中我们可以大概了解到constexpr的作用与用法。这里以上代码进行一些说明：\n1. c++11中对constexpr修饰的函数只能直接返回常量表达式。c++14中进行了增强，它可以支持局部变量和条件语句等。\n2. const int i2为运行时赋值，所以x2 = i2 报错； const int i3为常量表达式，所以x3=i3没问题\n\n    对于constexpr可以在这里[了解更多](http://cpptruths.blogspot.jp/2011/07/want-speed-use-constexpr-meta.html)。\n***\n### 2.2.4 range-based for loop\n　　在cppreference中，这个特性被描述为：\n>Executes a for loop over a range.Used as a more readable equivalent to the traditional for loop operating over a range of values, such as all elements in a container.　　\n　　这个描述有些官方和笼统。其实，range-based for loop在c++11中加入，它使得c++开始支持类似于'foreach'的范式格式。这种新格式使得我们获取或者操作数组时变得更容易，前提是我们不去关心索引，迭代器和数量的前提下。range-based　for loop可以支持迭代所有的c类型数组，初始化列表和重载了begin()和end()函数的容器。\n```cpp\n#include <iostream>\n#include <map>\n#include <vector>\n#include <string>\nusing namespace std;\n\nint main(int argc, char *argv[])\n{\n    map<string, vector<int>> m;\n    vector<int> v;\n    v.push_back(1);\n    v.push_back(2);\n    v.push_back(3);\n    m[\"my_vector\"] = v;\n\n    for(auto& tempM : m)\n    {\n        cout << tempM.first << endl;\n        for(auto& tempV : tempM.second)\n        {\n            cout << tempV << endl;\n        }\n    }\n\n    int arr[] = {1,2,3,4,5};\n    for(int& e : arr)\n    {\n        cout << e << endl;\n        e = e*e;\n    }\n    for(int& e : arr)\n    {\n        cout << e << endl;\n    }\n\n    return 0;\n}\n\n### 2.2.5 快速初始化列表\n　　在c++11中，它提供了更便捷，或者说是更人性化的初始化方式。\n```c++\n//c++ 98 error: in C++98 ‘m’ must be initialized by constructor, not by ‘{...}’\n//c++ 11\nvector<int> v = {1,2,3,4,5};\ncout << v[3] << endl;\n\n//c++98 error: could not convert ‘{{1, 2}}’ from ‘<brace-enclosed initializer list>’ to ‘std::map<int, int>’\n//c++11 ok\nmap<int, int> m = {{1,2}};\ncout << m[1] << endl;\n```\n  对于对象的内部属性初始化，我们可以通过调用参数为initializer_list的方法快速初始化。\n```c++\nstruct myclass {\n  myclass (int,int);\n  myclass (initializer_list<int>);\n  /* definitions ... */\n};\n\nmyclass foo {10,20};  // calls initializer_list ctor\nmyclass bar (10,20);  // calls first constructor\n```\n\n# 3 参考文献\n\n- [1]: [c++标准](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4296.pdf)\n- [2]: [cppreference](http://en.cppreference.com/w/cpp/types/NULL)\n- [3]: [Ten C++11 Features Every C++ Developer Should Use](http://www.codeproject.com/Articles/570638/Ten-Cplusplus-Features-Every-Cplusplus-Developer)\n","source":"_posts/了解c-11.md","raw":"---\ntitle: 了解c++11\ncomments: false\ndate: 2016-11-14 14:48:10\ntags:\n  - 编程\n  - c++11\ncategories:\n  - 程序设计\n  - c++11\n---\n\n# 一、简介\n\n　　起草本文的目的主要有两点：第一点，在c++11学习的过程中做一些摘要总结，尽量取其精华，为自己梳理出来一个比较清晰的记忆脉络；第二点，不得不说的就是随着年纪的增长，记忆力也开始变得并不那么可靠，做些记录，定期回头看看总是好的。\n　　文章会对c++11（其实是c++1x更准确些）的背景进行简要的概述，并尽量详细且准确的阐述c++11的新的特性。共同学习，不断进步。\n## 1.1 c++11概述\n　　我们生活中常常谈论的c++更多的是指传统c++，又或是可以称为c++98的版本。c++11也并不是什么神秘的新语言，而是基于传统c++发布13年后的第一次重大修订。它主要基于现在软件行业发展的新需求与新诉求进行的一种调整——增加新特性并弃用部分特性。\n\n<!--more-->\n\n## 1.2 文章小贴士\n### 1.2.1 笔者开发运行环境\n```bash\n> lennybai@lennybai~$ lsb_release -a\n> No LSB modules are available.\n> Distributor ID:\tUbuntu\n> Description:\tUbuntu 16.04.1 LTS\n> Release:\t16.04\n> Codename:\txenial\n\n> lennybai@lennybai:~$ g++ --version\n> g++ (Ubuntu 5.4.0-6ubuntu1~16.04.4) 5.4.0 20160609\n> Copyright (C) 2015 Free Software Foundation, Inc.\n> This is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n```\n### 1.2.2 小贴士\n> g++ main.cpp -std=c++11　　\n\n若使用c++11，请记得添加编译选项\n\n### 1.2.3 原创提醒\n　　本文主要目的在于个人学习与记录，如果能够有幸帮助到同样在修行的同僚那自然是件幸事，引用还望注明出处。笔者在写作过程中也会大量的阅读各种文章以增强理解，当然，会尽最大可能去注明文章引用，如果存在问题，希望指正。\n\n***\n\n# 二、正篇\n　　对于学习新东西，我的习惯一般都是先google或者baidu看大量的博客来给自己洗脑，让自己有一定的知识轮廓。接下来就会开始啃官方文档，或者阅读刚刚浏览过的博客中推荐的各种书籍。当然，如果有个不错的视频教程让自己快进着点一点最好不过了，很多效果一目了然。\n\n　　在stackoverflow上，有人给出了不错的[书籍大纲](http://stackoverflow.com/a/388282)，这些对于积累知识的初学者更有益。对于那些对于传统c++已经很熟悉，只是希望快速的了解c++11的新特性，并择机使用的选手来说，实验楼的[《C++ 11/14 高速上手教程》](https://www.shiyanlou.com/courses/605/labs/2022/document)免费在线课程可能会更有帮助。\n\n　　本文主要基于实验楼的课程大纲进行整理，并进行部分知识点的拓展完善。\n\n## 2.1 弃用(deprecated)特性\n　　c++11提及到部分弃用特性。这里弃用并不等于废除并从标准中移除，而是警醒程序员在使用c++的时候能够意识到某些特性应避免使用。其实可能为了保证兼容性，这些特性可能永远不会被剔除出去（通常情况下是在编译的时，会显示一个弃用的warning），依旧可以被使用。\n```bash\nlennybai@lennybai:~/Desktop/cpp11$ g++ main.cpp -std=c++11\nmain.cpp: In function ‘int main()’:\nmain.cpp:7:15: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]\n     char* a = \"hello world\";\n\n```\n　　但是我们应该尽量遵循语言的发展与变迁，适当的改变自己对语言的使用方式。一个不恰当的例子，就好比黑白彩电置于当今社会，依然可以被使用，但是有更好的选择时为什么不去尝试呢？\n\n### 2.1.1 被移除或者弃用的特性\n\n> * std::auto_ptr 被 std::unique_ptr 取代。\n> * exception specifications\n> * bool 类型的 ++ 操作被弃用。\n> * export: 用法已被去掉,但关键字还是被保留了,给将来可能的特性使用\n> * 函数对象的基类(std::unary_function, std::binary_function)、函数指针适配器、类型成员指针适配器以及绑定器 (binder)。\n> * [顺序点](http://www.cnblogs.com/dolphin0520/archive/2011/04/20/2022330.html) (sequence point): 这个术语正被更为易懂的描述所取代。一个运算可以发生 (is sequenced before) 在另一个运算之前; 又或者两个运算彼此之间没有顺序关系 (are unsequenced)。\n\n　　就像前面提到的，被弃用的特性应该引起一定的重视。这里主要参考维基百科上面提到的内容列出了一些已经被弃用的特性。在以后的学习过程中也会不断完善这一部分。\n\n## 2.2 新特性\n　　对于c++11的新特性应该是阅读本文的客官们更关心的。c++11新特性包括但不完全是：lambda表达式，类型推断关键字auto、decltype和对模板的大量改进。在这一章节我们进行详细阐述。\n\n### 2.2.1 自动类型推断（auto/decltype）\n　　对于传统c++而言，变量的类型都必须明确定义。虽然已经习惯传统c++编程的朋友们在声明或者定义基本类型(如int、char等)的变量时，并没有太多不妥的感觉。然而，可能也会在使用复杂模板时，觉得代码有点又丑又长。比如常见的迭代器声明:\n```cpp\nfor ( map < int,UserDefClass<userDefTemptype> >::iterator itr= userMap.begin(); itr !=userMap.end(); ++itr)\n```\n　　这里我列出了一个比较夸张的例子，目的是希望指出自动类型推断存在的意义。它其实已经很普遍的存在于现代编程语言之中(如python, javascript等脚本语言)。而在c++11中，通过对传统c++中auto关键字的修改得到自动类型推断的支持。\n　　auto关键字在传统c++中用来指定存储期，一般用于指明具有自动生命周期的变量。最常见的就是函数内的局部变量。编译器在做编译时，对一般不是static修饰的变量，则默认赋予auto类型，所以auto关键字几乎很少被使用。在传统c++中，auto关键字的使用方法如下：\n```cpp\nauto int a;\n```\n　　而在c++11中，auto的功能变为了类型自动推断,编译器会根据初始代码推断所声明变量的真实类型。将类型判断的工作由程序员交给了编译器，这样，在一定程度提高了代码开发的效率。而且，大部分情况下会直观的发现，代码变的更简短(当然int类型还是要比auto少一个字符)。这里是使用auto对上面繁重代码的优化:\n```cpp\nfor ( auto itr= userMap.begin(); itr !=userMap.end(); ++itr)\n```\n　　有没有很酷！接下来我们来看一下auto的具体使用，来更详细的了解一下它的功能。同时，也要学习一下它的使用规则。auto在c++11中，最容易理解的使用方式莫过于变量定义时的类型推断:\n```cpp\nauto a = 10;\nauto b = 'A';\nauto c(\"hello\");\ncout << \"a:\" << typeid(a).name() << endl;    　// “a:i”\ncout << \"b:\" << typeid(b).name() << endl;    　// \"b:c\"\ncout << \"c:\" << typeid(c).name() << endl;    　// \"c:PKc\"\n```\n　　这里我们可以看到，对于变量可以不用明确的去定义其类型，而是用auto代替。其最终效果与传统c++的变量定义效果没有差别。这里可以通过typeid函数进行验证(#include< typeinfo >).\n　　在很多对于auto的讲解中，它常常被称作占位符。所谓占位符，我的理解是它不能像数据类型那样去声明一个变量。所以使用auto的变量必须进行初始化。理所当然的，也就不能使用c++类型转化将变量转换为auto类型。\n```cpp\nauto a;         //error: declaration of ‘auto a’ has no initializer\n\nint value1 = 10;\nauto value2 = (auto)value1;    // error: invalid use of ‘auto’\nauto value3 = static_cast<auto>(value１);    // error: invalid use of ‘auto’\n```\n　　c++11已经彻底废弃了原有auto的使用方式，如代码所示:\n```cpp\nauto int a = 10;  //error: two or more data types in declaration of ‘a’\n```\n　　auto可以接受c++的变量名表列的方式定义多个变量，但所有变量应具有相同的数据类型。\n```cpp\nauto a1=10, a2=20, a3=30;\nauto a4=10, a5=20.0, a6 = 'A';    // error: conflicting declaration\n```\n\n　　auto在初始化时，会自动去除引用、const、volatile的语意。这种说法可能很难理解。其实就是如果原始变量为引用、const、volatile类型，auto初始化时需要自行指明。\n```cpp\n\n    int refa = 10;\n    int &refb = refa;\n    auto refc = refb;\n    auto &refd = refb;\n    refa = 100;\n    cout << \"refa: \" << typeid(refa).name() << \" \" << refa << endl;    // 100\n    cout << \"refb: \" << typeid(refb).name() << \" \" << refb << endl;    // 100\n    cout << \"refc: \" << typeid(refc).name() << \" \" << refc << endl;    // 10\n    cout << \"refd: \" << typeid(refd).name() << \" \" << refd << endl;    // 100\n\n    int arrA[3] = { 1, 2, 3 };\n    auto arrB = arrA;\n    auto &refArrB = arrA;\n    cout << \"arrA: \" << typeid(arrA).name() << endl;    // A3_i\n    cout << \"arrB: \" << typeid(arrB).name() << endl;    //Pi\n    cout << \"refArrB: \" << typeid(refArrB).name() << endl;    // A3_i\n```\n\n　　auto关键字不仅可以配合变量使用，它在对传统c++函数的代码优化上也可以说是大放异彩。特别是针对那些具有模板类型的函数，更是让我们在编写时变的简单高效。我们来看第一个例子。这里我们在模板函数中使用auto定义了一个站位变量。这样就使得该变量在随着传入值的类型发生变化时，自动进行类型转换。是不是很方便。\n```cpp\ntemplate <typename _Tx,typename _Ty>\nvoid func(_Tx x, _Ty y)\n{\n    auto v = x*y;\n    cout << v << endl;\n}\n\n//call func\nfunc3(1,2);    // 2\nfunc3(1.1,2.2);    // 2.42\n```\n\n　　auto关键字可以在函数中使用，那我们自然会想到，它能不能作为函数的返回值占位符。c++11自然提供了这种机制。但是用法可能和我们预期有一定的差距。\n```cpp\nauto func(int x, int y)->int\n{\n    return x+y;\n}\n```\n\n　　在c++11中，这样的返回值看起来很奇葩。使用auto来标注函数返回值时，还需要在末尾指定返回类型。会不会觉得还不如不用auto类型。但我觉得制定标准的人肯定也会考虑到这个问题。自然就去搜索了一些相关内容:\n1. 在函数返回值特别长的时候放在末尾，会显得好看。\n2. c++14会把返回值去掉，让编译器直接支持自动推倒（c++14确实是做到了）\n3. 出现在函数后面的表达式在代码编译时也是出现在函数之后的，这就使得很多函数中的临时变量可以出现在这个表达式中。这个我们在后面的decltype使用中可以看到效果。(显然，这个才是我认为最重要的)\n\n```cpp\n//c++14　支持\nauto func(int x, int y)\n{\n    return x+y;\n}\n```\n\n　　这种auto作为函数返回值占位符的用法，会使编写复杂的模板函数时变得相当简单和灵活。\n\n```cpp\ntemplate <typename _Tx, typename _Ty>\nauto func(_Tx x, _Ty y) -> decltype(x*y)\n{\n    return x*y;\n}\n\n//call func\nauto funcA = func(1,2);\ncout << funcA << endl;    // 2\nfuncA = func(1.1,2.2);\ncout << funcA << endl;    // 2\nauto funcB = func(1.1,2.2);\ncout << funcB << endl;    // 2.42\n```\n\n  这里用到了decltype(declared type)，它可以用来通过传入的参数来声明类型。这样func这个模板函数的会很方便的随着模板传入类型来自动改变返回值类型。bravo！\n\n  decltype不存在太多的歧义，这里直接列出代码。\n\n```cpp\nint declint = 10;\ndecltype(declint) declintt;\n\nvector<int> vec;\ntypedef decltype(vec.begin()) vectype;\n\ndecltype(declint) temp1 = declint;\ndecltype((declint)) temp2 = declint; //decltype(())定义的是引用类型\ndecltype((declint)) temp3;    // error: ‘temp3’ declared as reference but not initialized\n```\n\n　　接下来我们说一下刚才我们提到的函数返回类型后置的问题。我们已经知道通过decltype可以根据传入参数获取最终的数据类型。那么我们将下面代码进行修改：\n\n```cpp\n// origin, ok~\ntemplate <typename _Tx, typename _Ty>\nauto func(_Tx x, _Ty y) -> decltype(x*y)\n{\n    return x*y;\n}\n```\n\n　　一般想法是认为，返回值不就是decltype(x*y)类型么？　那我们直接放前面不是更方便。好的，我们改写一下.\n\n```cpp\n// update\ntemplate <typename _Tx, typename _Ty>\ndecltype(x*y) func(_Tx x, _Ty y)\n{\n    return x*y;\n}\n```\n\n  然而：\n\n```bash\nlennybai@lennybai:~/project/cpp11$ g++ main.cpp -std=c++11\nmain.cpp:16:10: error: ‘x’ was not declared in this scope\n decltype(x*y) func4(_Tx x, _Ty y)\n          ^\nmain.cpp:16:10: error: ‘x’ was not declared in this scope\nmain.cpp:16:12: error: ‘y’ was not declared in this scope\n decltype(x*y) func4(_Tx x, _Ty y)\n            ^\n```\n\n　　是的，结果就是这么神奇。这也说明　’function->expr‘ 中的expr是出现在函数之后的。如果不使用auto占位符，而直接使用decltype(x*y)声明函数类型。由于x,y在函数运行前尚未明确类型，所以这里就会出现编译错误。\n\n　　在这一小节最后需要指出的是，auto是不能作为参数占位符出现的。\n\n```cpp\n// 客官不可以哦\nvoid func2(auto x)\n{\n     //do something\n}\n```\n### 2.2.2 指针空值nullptr\n　　在传统c++中，通常使用NULL来标识空指针。NULL通常是一个与0相关的宏定义。这里是/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h中对NULL的定义。\n```c++\n#if defined (_STDDEF_H) || defined (__need_NULL)\n#undef NULL\t\t/* in case <stdio.h> has defined it. */\n#ifdef __GNUG__\n#define NULL __null\n#else   /* G++ */\n#ifndef __cplusplus\n#define NULL ((void *)0)\n#else   /* C++ */\n#define NULL 0\n#endif  /* C++ */\n#endif  /* G++ */\n#endif\t/* NULL not defined and <stddef.h> or need NULL.  */\n#undef\t__need_NULL\n```\n　　我们发现在传统C++中，NULL被定义为0。由于没有类型限制，它可以被强制转换为各种其他数据类型。最常见的例子就是当出现函数重载时会发生混乱。\n```c++\nvoid func(int n) { cout << \"call func(int n) : \" << endl; };\nvoid func(int *p) { cout << \"call func(int *p) : \" << endl; };\n\nfunc(NULL); // error: call of overloaded ‘func(NULL)’ is ambiguous\n```\n　　为了区分不同类型的空指针，C++11引入了nullptr_t类型的指针空值nullptr。它可以自动隐性的转换为所需的成员指针或者函数指针的类型。从而使程序更加清晰明了。值得注意的是，nullptr只能用来标识指针类型。\n```c++\n#include <iostream>\nusing namespace std;\n\nvoid func(int n) { cout << \"call func(int n) : \" << endl; };\nvoid func(int *p) { cout << \"call func(int *p) : \" << endl; };\n\nint main()\n{\n    int nIntNull = NULL;        // ok\n    int *pIntNull = NULL;        // ok\n    int *pIntNullptr = nullptr;    // ok\n    int nIntNullptr = nullptr;    // error: cannot convert ‘std::nullptr_t’ to ‘int’ in initialization\n\n    func(NULL); // error: call of overloaded ‘func(NULL)’ is ambiguous\n    func(nullptr); // call func(int *p)\n\n    return 0;\n}\n```\n### 2.2.3 常量区分符constexpr\n　　常量表达式在c++中还是很常见的，特别是在数组或者容器等初始化时传入的大小通常为常量表达式。在C++中，常量表达式通常被解释为在编译时可以明确其值的表达式。最常见的常量表达式就是被const标识的变量：\n```c++\nint n = 1;\nstd::array<int, n> a1; // error, n is not a constant expression\nconst int cn = 2;\nstd::array<int, cn> a2; // OK, cn is a constant expression\n```\n　　其实，在我们进行程序设计的时候，常常会发现很多情况是需要根据运行情况去获取一个值，然后再进行数据或者容器大小的分配。而这些值我们在给定条件值之后，很容易就会被推导出来。而对于计算机来说，却需要在每次运行时不断重复相同的推倒工作。那么我们可能会觉得，如果可以像常量表达式那样在编译时就确定其值，是不是在运行时就可以得到更高的运行效率呢。c++为我们提供了常量区分符constexpr来实现这一效果。\n　　constexpr用来标示一个变量或者函数为常量表达式，也是告诉编译器需要去验证它们是不是一个常量表达式。\n```c++\nint x;\nstruct A {\n    constexpr A(bool b) : m(b?42:x) { }\n    int m;\n};\nconstexpr int v = A(true).m; // OK\nconstexpr int w = A(false).m; // error: non-const x\nconstexpr int mf = 20;          // 20是常量表达式\nconstexpr int limit = mf + 1;   // mf + 1是常量表达式\nconstexpr int sz = size();      // 只有当size是一个constexpr函数时才是一条正确的声明语句\n\nconstexpr int A()\n{\n    return 10;\n}\n\nconstexpr int fibonacci1(const int n) {\n    return n == 1 || n == 2 ? 1 : fibonacci1(n-1)+fibonacci1(n-2);\n}\n\n// c++11 error error: body of constexpr function ‘constexpr int fibonacci2(int)’ not a return-statement\n// c++14 OK\n constexpr int fibonacci2(const int n) {\n     if(n == 1) return 1;\n  　 if(n == 2) return 1;\n  　 return fibonacci2(n-1)+fibonacci2(n-2);\n}\n\nint i1 = 10;\nconst int i2 = i1;\nconst int i3 = 10;\nconstexpr int x1 = i1;    // error: the value of ‘i1’ is not usable in a constant expression\nconstexpr int x2 = i2;    // error: the value of ‘i2’ is not usable in a constant expression\nconstexpr int x3 = i3;    // ok\nconstexpr int x4 = 10;    // ok\nconstexpr int x5 = A();   // ok\nconstexpr int x6 = fibonacci1(10);    // ok\nconstexpr int x7 = cin.get(); // !error\nconstexpr int x8 = fibonacci2(10);\n\nint a[i2];    // ok\nint b[x4];    // ok\n```\n　　从上面的代码中我们可以大概了解到constexpr的作用与用法。这里以上代码进行一些说明：\n1. c++11中对constexpr修饰的函数只能直接返回常量表达式。c++14中进行了增强，它可以支持局部变量和条件语句等。\n2. const int i2为运行时赋值，所以x2 = i2 报错； const int i3为常量表达式，所以x3=i3没问题\n\n    对于constexpr可以在这里[了解更多](http://cpptruths.blogspot.jp/2011/07/want-speed-use-constexpr-meta.html)。\n***\n### 2.2.4 range-based for loop\n　　在cppreference中，这个特性被描述为：\n>Executes a for loop over a range.Used as a more readable equivalent to the traditional for loop operating over a range of values, such as all elements in a container.　　\n　　这个描述有些官方和笼统。其实，range-based for loop在c++11中加入，它使得c++开始支持类似于'foreach'的范式格式。这种新格式使得我们获取或者操作数组时变得更容易，前提是我们不去关心索引，迭代器和数量的前提下。range-based　for loop可以支持迭代所有的c类型数组，初始化列表和重载了begin()和end()函数的容器。\n```cpp\n#include <iostream>\n#include <map>\n#include <vector>\n#include <string>\nusing namespace std;\n\nint main(int argc, char *argv[])\n{\n    map<string, vector<int>> m;\n    vector<int> v;\n    v.push_back(1);\n    v.push_back(2);\n    v.push_back(3);\n    m[\"my_vector\"] = v;\n\n    for(auto& tempM : m)\n    {\n        cout << tempM.first << endl;\n        for(auto& tempV : tempM.second)\n        {\n            cout << tempV << endl;\n        }\n    }\n\n    int arr[] = {1,2,3,4,5};\n    for(int& e : arr)\n    {\n        cout << e << endl;\n        e = e*e;\n    }\n    for(int& e : arr)\n    {\n        cout << e << endl;\n    }\n\n    return 0;\n}\n\n### 2.2.5 快速初始化列表\n　　在c++11中，它提供了更便捷，或者说是更人性化的初始化方式。\n```c++\n//c++ 98 error: in C++98 ‘m’ must be initialized by constructor, not by ‘{...}’\n//c++ 11\nvector<int> v = {1,2,3,4,5};\ncout << v[3] << endl;\n\n//c++98 error: could not convert ‘{{1, 2}}’ from ‘<brace-enclosed initializer list>’ to ‘std::map<int, int>’\n//c++11 ok\nmap<int, int> m = {{1,2}};\ncout << m[1] << endl;\n```\n  对于对象的内部属性初始化，我们可以通过调用参数为initializer_list的方法快速初始化。\n```c++\nstruct myclass {\n  myclass (int,int);\n  myclass (initializer_list<int>);\n  /* definitions ... */\n};\n\nmyclass foo {10,20};  // calls initializer_list ctor\nmyclass bar (10,20);  // calls first constructor\n```\n\n# 3 参考文献\n\n- [1]: [c++标准](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4296.pdf)\n- [2]: [cppreference](http://en.cppreference.com/w/cpp/types/NULL)\n- [3]: [Ten C++11 Features Every C++ Developer Should Use](http://www.codeproject.com/Articles/570638/Ten-Cplusplus-Features-Every-Cplusplus-Developer)\n","slug":"了解c-11","published":1,"updated":"2016-11-18T04:29:07.296Z","layout":"post","photos":[],"link":"","_id":"civnaj76w0001n9ou1ay5b7l1","content":"<h1 id=\"一、简介\"><a href=\"#一、简介\" class=\"headerlink\" title=\"一、简介\"></a>一、简介</h1><p>　　起草本文的目的主要有两点：第一点，在c++11学习的过程中做一些摘要总结，尽量取其精华，为自己梳理出来一个比较清晰的记忆脉络；第二点，不得不说的就是随着年纪的增长，记忆力也开始变得并不那么可靠，做些记录，定期回头看看总是好的。<br>　　文章会对c++11（其实是c++1x更准确些）的背景进行简要的概述，并尽量详细且准确的阐述c++11的新的特性。共同学习，不断进步。</p>\n<h2 id=\"1-1-c-11概述\"><a href=\"#1-1-c-11概述\" class=\"headerlink\" title=\"1.1 c++11概述\"></a>1.1 c++11概述</h2><p>　　我们生活中常常谈论的c++更多的是指传统c++，又或是可以称为c++98的版本。c++11也并不是什么神秘的新语言，而是基于传统c++发布13年后的第一次重大修订。它主要基于现在软件行业发展的新需求与新诉求进行的一种调整——增加新特性并弃用部分特性。</p>\n<a id=\"more\"></a>\n<h2 id=\"1-2-文章小贴士\"><a href=\"#1-2-文章小贴士\" class=\"headerlink\" title=\"1.2 文章小贴士\"></a>1.2 文章小贴士</h2><h3 id=\"1-2-1-笔者开发运行环境\"><a href=\"#1-2-1-笔者开发运行环境\" class=\"headerlink\" title=\"1.2.1 笔者开发运行环境\"></a>1.2.1 笔者开发运行环境</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; lennybai@lennybai~$ lsb_release <span class=\"_\">-a</span></div><div class=\"line\">&gt; No LSB modules are available.</div><div class=\"line\">&gt; Distributor ID:\tUbuntu</div><div class=\"line\">&gt; Description:\tUbuntu 16.04.1 LTS</div><div class=\"line\">&gt; Release:\t16.04</div><div class=\"line\">&gt; Codename:\txenial</div><div class=\"line\"></div><div class=\"line\">&gt; lennybai@lennybai:~$ g++ --version</div><div class=\"line\">&gt; g++ (Ubuntu 5.4.0-6ubuntu1~16.04.4) 5.4.0 20160609</div><div class=\"line\">&gt; Copyright (C) 2015 Free Software Foundation, Inc.</div><div class=\"line\">&gt; This is free software; see the <span class=\"built_in\">source</span> <span class=\"keyword\">for</span> copying conditions.  There is NO</div><div class=\"line\">warranty; not even <span class=\"keyword\">for</span> MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</div></pre></td></tr></table></figure>\n<h3 id=\"1-2-2-小贴士\"><a href=\"#1-2-2-小贴士\" class=\"headerlink\" title=\"1.2.2 小贴士\"></a>1.2.2 小贴士</h3><blockquote>\n<p>g++ main.cpp -std=c++11　　</p>\n</blockquote>\n<p>若使用c++11，请记得添加编译选项</p>\n<h3 id=\"1-2-3-原创提醒\"><a href=\"#1-2-3-原创提醒\" class=\"headerlink\" title=\"1.2.3 原创提醒\"></a>1.2.3 原创提醒</h3><p>　　本文主要目的在于个人学习与记录，如果能够有幸帮助到同样在修行的同僚那自然是件幸事，引用还望注明出处。笔者在写作过程中也会大量的阅读各种文章以增强理解，当然，会尽最大可能去注明文章引用，如果存在问题，希望指正。</p>\n<hr>\n<h1 id=\"二、正篇\"><a href=\"#二、正篇\" class=\"headerlink\" title=\"二、正篇\"></a>二、正篇</h1><p>　　对于学习新东西，我的习惯一般都是先google或者baidu看大量的博客来给自己洗脑，让自己有一定的知识轮廓。接下来就会开始啃官方文档，或者阅读刚刚浏览过的博客中推荐的各种书籍。当然，如果有个不错的视频教程让自己快进着点一点最好不过了，很多效果一目了然。</p>\n<p>　　在stackoverflow上，有人给出了不错的<a href=\"http://stackoverflow.com/a/388282\" target=\"_blank\" rel=\"external\">书籍大纲</a>，这些对于积累知识的初学者更有益。对于那些对于传统c++已经很熟悉，只是希望快速的了解c++11的新特性，并择机使用的选手来说，实验楼的<a href=\"https://www.shiyanlou.com/courses/605/labs/2022/document\" target=\"_blank\" rel=\"external\">《C++ 11/14 高速上手教程》</a>免费在线课程可能会更有帮助。</p>\n<p>　　本文主要基于实验楼的课程大纲进行整理，并进行部分知识点的拓展完善。</p>\n<h2 id=\"2-1-弃用-deprecated-特性\"><a href=\"#2-1-弃用-deprecated-特性\" class=\"headerlink\" title=\"2.1 弃用(deprecated)特性\"></a>2.1 弃用(deprecated)特性</h2><p>　　c++11提及到部分弃用特性。这里弃用并不等于废除并从标准中移除，而是警醒程序员在使用c++的时候能够意识到某些特性应避免使用。其实可能为了保证兼容性，这些特性可能永远不会被剔除出去（通常情况下是在编译的时，会显示一个弃用的warning），依旧可以被使用。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">lennybai@lennybai:~/Desktop/cpp11$ g++ main.cpp -std=c++11</div><div class=\"line\">main.cpp: In <span class=\"keyword\">function</span> ‘int main()’:</div><div class=\"line\">main.cpp:7:15: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]</div><div class=\"line\">     char* a = <span class=\"string\">\"hello world\"</span>;</div></pre></td></tr></table></figure></p>\n<p>　　但是我们应该尽量遵循语言的发展与变迁，适当的改变自己对语言的使用方式。一个不恰当的例子，就好比黑白彩电置于当今社会，依然可以被使用，但是有更好的选择时为什么不去尝试呢？</p>\n<h3 id=\"2-1-1-被移除或者弃用的特性\"><a href=\"#2-1-1-被移除或者弃用的特性\" class=\"headerlink\" title=\"2.1.1 被移除或者弃用的特性\"></a>2.1.1 被移除或者弃用的特性</h3><blockquote>\n<ul>\n<li>std::auto_ptr 被 std::unique_ptr 取代。</li>\n<li>exception specifications</li>\n<li>bool 类型的 ++ 操作被弃用。</li>\n<li>export: 用法已被去掉,但关键字还是被保留了,给将来可能的特性使用</li>\n<li>函数对象的基类(std::unary_function, std::binary_function)、函数指针适配器、类型成员指针适配器以及绑定器 (binder)。</li>\n<li><a href=\"http://www.cnblogs.com/dolphin0520/archive/2011/04/20/2022330.html\" target=\"_blank\" rel=\"external\">顺序点</a> (sequence point): 这个术语正被更为易懂的描述所取代。一个运算可以发生 (is sequenced before) 在另一个运算之前; 又或者两个运算彼此之间没有顺序关系 (are unsequenced)。</li>\n</ul>\n</blockquote>\n<p>　　就像前面提到的，被弃用的特性应该引起一定的重视。这里主要参考维基百科上面提到的内容列出了一些已经被弃用的特性。在以后的学习过程中也会不断完善这一部分。</p>\n<h2 id=\"2-2-新特性\"><a href=\"#2-2-新特性\" class=\"headerlink\" title=\"2.2 新特性\"></a>2.2 新特性</h2><p>　　对于c++11的新特性应该是阅读本文的客官们更关心的。c++11新特性包括但不完全是：lambda表达式，类型推断关键字auto、decltype和对模板的大量改进。在这一章节我们进行详细阐述。</p>\n<h3 id=\"2-2-1-自动类型推断（auto-decltype）\"><a href=\"#2-2-1-自动类型推断（auto-decltype）\" class=\"headerlink\" title=\"2.2.1 自动类型推断（auto/decltype）\"></a>2.2.1 自动类型推断（auto/decltype）</h3><p>　　对于传统c++而言，变量的类型都必须明确定义。虽然已经习惯传统c++编程的朋友们在声明或者定义基本类型(如int、char等)的变量时，并没有太多不妥的感觉。然而，可能也会在使用复杂模板时，觉得代码有点又丑又长。比如常见的迭代器声明:<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> ( <span class=\"built_in\">map</span> &lt; <span class=\"keyword\">int</span>,UserDefClass&lt;userDefTemptype&gt; &gt;::iterator itr= userMap.begin(); itr !=userMap.end(); ++itr)</div></pre></td></tr></table></figure></p>\n<p>　　这里我列出了一个比较夸张的例子，目的是希望指出自动类型推断存在的意义。它其实已经很普遍的存在于现代编程语言之中(如python, javascript等脚本语言)。而在c++11中，通过对传统c++中auto关键字的修改得到自动类型推断的支持。<br>　　auto关键字在传统c++中用来指定存储期，一般用于指明具有自动生命周期的变量。最常见的就是函数内的局部变量。编译器在做编译时，对一般不是static修饰的变量，则默认赋予auto类型，所以auto关键字几乎很少被使用。在传统c++中，auto关键字的使用方法如下：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">auto</span> <span class=\"keyword\">int</span> a;</div></pre></td></tr></table></figure></p>\n<p>　　而在c++11中，auto的功能变为了类型自动推断,编译器会根据初始代码推断所声明变量的真实类型。将类型判断的工作由程序员交给了编译器，这样，在一定程度提高了代码开发的效率。而且，大部分情况下会直观的发现，代码变的更简短(当然int类型还是要比auto少一个字符)。这里是使用auto对上面繁重代码的优化:<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> ( <span class=\"keyword\">auto</span> itr= userMap.begin(); itr !=userMap.end(); ++itr)</div></pre></td></tr></table></figure></p>\n<p>　　有没有很酷！接下来我们来看一下auto的具体使用，来更详细的了解一下它的功能。同时，也要学习一下它的使用规则。auto在c++11中，最容易理解的使用方式莫过于变量定义时的类型推断:<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">auto</span> a = <span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"keyword\">auto</span> b = <span class=\"string\">'A'</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">c</span><span class=\"params\">(<span class=\"string\">\"hello\"</span>)</span></span>;</div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"a:\"</span> &lt;&lt; <span class=\"keyword\">typeid</span>(a).name() &lt;&lt; <span class=\"built_in\">endl</span>;    　<span class=\"comment\">// “a:i”</span></div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"b:\"</span> &lt;&lt; <span class=\"keyword\">typeid</span>(b).name() &lt;&lt; <span class=\"built_in\">endl</span>;    　<span class=\"comment\">// \"b:c\"</span></div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"c:\"</span> &lt;&lt; <span class=\"keyword\">typeid</span>(c).name() &lt;&lt; <span class=\"built_in\">endl</span>;    　<span class=\"comment\">// \"c:PKc\"</span></div></pre></td></tr></table></figure></p>\n<p>　　这里我们可以看到，对于变量可以不用明确的去定义其类型，而是用auto代替。其最终效果与传统c++的变量定义效果没有差别。这里可以通过typeid函数进行验证(#include&lt; typeinfo &gt;).<br>　　在很多对于auto的讲解中，它常常被称作占位符。所谓占位符，我的理解是它不能像数据类型那样去声明一个变量。所以使用auto的变量必须进行初始化。理所当然的，也就不能使用c++类型转化将变量转换为auto类型。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">auto</span> a;         <span class=\"comment\">//error: declaration of ‘auto a’ has no initializer</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> value1 = <span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"keyword\">auto</span> value2 = (<span class=\"keyword\">auto</span>)value1;    <span class=\"comment\">// error: invalid use of ‘auto’</span></div><div class=\"line\"><span class=\"keyword\">auto</span> value3 = <span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">auto</span>&gt;(value１);    <span class=\"comment\">// error: invalid use of ‘auto’</span></div></pre></td></tr></table></figure></p>\n<p>　　c++11已经彻底废弃了原有auto的使用方式，如代码所示:<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">auto</span> <span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;  <span class=\"comment\">//error: two or more data types in declaration of ‘a’</span></div></pre></td></tr></table></figure></p>\n<p>　　auto可以接受c++的变量名表列的方式定义多个变量，但所有变量应具有相同的数据类型。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">auto</span> a1=<span class=\"number\">10</span>, a2=<span class=\"number\">20</span>, a3=<span class=\"number\">30</span>;</div><div class=\"line\"><span class=\"keyword\">auto</span> a4=<span class=\"number\">10</span>, a5=<span class=\"number\">20.0</span>, a6 = <span class=\"string\">'A'</span>;    <span class=\"comment\">// error: conflicting declaration</span></div></pre></td></tr></table></figure></p>\n<p>　　auto在初始化时，会自动去除引用、const、volatile的语意。这种说法可能很难理解。其实就是如果原始变量为引用、const、volatile类型，auto初始化时需要自行指明。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> refa = <span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> &amp;refb = refa;</div><div class=\"line\"><span class=\"keyword\">auto</span> refc = refb;</div><div class=\"line\"><span class=\"keyword\">auto</span> &amp;refd = refb;</div><div class=\"line\">refa = <span class=\"number\">100</span>;</div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"refa: \"</span> &lt;&lt; <span class=\"keyword\">typeid</span>(refa).name() &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; refa &lt;&lt; <span class=\"built_in\">endl</span>;    <span class=\"comment\">// 100</span></div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"refb: \"</span> &lt;&lt; <span class=\"keyword\">typeid</span>(refb).name() &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; refb &lt;&lt; <span class=\"built_in\">endl</span>;    <span class=\"comment\">// 100</span></div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"refc: \"</span> &lt;&lt; <span class=\"keyword\">typeid</span>(refc).name() &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; refc &lt;&lt; <span class=\"built_in\">endl</span>;    <span class=\"comment\">// 10</span></div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"refd: \"</span> &lt;&lt; <span class=\"keyword\">typeid</span>(refd).name() &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; refd &lt;&lt; <span class=\"built_in\">endl</span>;    <span class=\"comment\">// 100</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> arrA[<span class=\"number\">3</span>] = &#123; <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span> &#125;;</div><div class=\"line\"><span class=\"keyword\">auto</span> arrB = arrA;</div><div class=\"line\"><span class=\"keyword\">auto</span> &amp;refArrB = arrA;</div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"arrA: \"</span> &lt;&lt; <span class=\"keyword\">typeid</span>(arrA).name() &lt;&lt; <span class=\"built_in\">endl</span>;    <span class=\"comment\">// A3_i</span></div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"arrB: \"</span> &lt;&lt; <span class=\"keyword\">typeid</span>(arrB).name() &lt;&lt; <span class=\"built_in\">endl</span>;    <span class=\"comment\">//Pi</span></div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"refArrB: \"</span> &lt;&lt; <span class=\"keyword\">typeid</span>(refArrB).name() &lt;&lt; <span class=\"built_in\">endl</span>;    <span class=\"comment\">// A3_i</span></div></pre></td></tr></table></figure></p>\n<p>　　auto关键字不仅可以配合变量使用，它在对传统c++函数的代码优化上也可以说是大放异彩。特别是针对那些具有模板类型的函数，更是让我们在编写时变的简单高效。我们来看第一个例子。这里我们在模板函数中使用auto定义了一个站位变量。这样就使得该变量在随着传入值的类型发生变化时，自动进行类型转换。是不是很方便。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> _Tx,<span class=\"keyword\">typename</span> _Ty&gt;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(_Tx x, _Ty y)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">auto</span> v = x*y;</div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; v &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//call func</span></div><div class=\"line\">func3(<span class=\"number\">1</span>,<span class=\"number\">2</span>);    <span class=\"comment\">// 2</span></div><div class=\"line\">func3(<span class=\"number\">1.1</span>,<span class=\"number\">2.2</span>);    <span class=\"comment\">// 2.42</span></div></pre></td></tr></table></figure></p>\n<p>　　auto关键字可以在函数中使用，那我们自然会想到，它能不能作为函数的返回值占位符。c++11自然提供了这种机制。但是用法可能和我们预期有一定的差距。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">auto func(int x, int y)-&gt;int</div><div class=\"line\">&#123;</div><div class=\"line\">    return x+y;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>　　在c++11中，这样的返回值看起来很奇葩。使用auto来标注函数返回值时，还需要在末尾指定返回类型。会不会觉得还不如不用auto类型。但我觉得制定标准的人肯定也会考虑到这个问题。自然就去搜索了一些相关内容:</p>\n<ol>\n<li>在函数返回值特别长的时候放在末尾，会显得好看。</li>\n<li>c++14会把返回值去掉，让编译器直接支持自动推倒（c++14确实是做到了）</li>\n<li>出现在函数后面的表达式在代码编译时也是出现在函数之后的，这就使得很多函数中的临时变量可以出现在这个表达式中。这个我们在后面的decltype使用中可以看到效果。(显然，这个才是我认为最重要的)</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//c++14　支持</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> x+y;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>　　这种auto作为函数返回值占位符的用法，会使编写复杂的模板函数时变得相当简单和灵活。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">template &lt;typename _Tx, typename _Ty&gt;</div><div class=\"line\">auto func(_Tx x, _Ty y) -&gt; decltype(x*y)</div><div class=\"line\">&#123;</div><div class=\"line\">    return x*y;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//call func</div><div class=\"line\">auto funcA = func(1,2);</div><div class=\"line\">cout &lt;&lt; funcA &lt;&lt; endl;    // 2</div><div class=\"line\">funcA = func(1.1,2.2);</div><div class=\"line\">cout &lt;&lt; funcA &lt;&lt; endl;    // 2</div><div class=\"line\">auto funcB = func(1.1,2.2);</div><div class=\"line\">cout &lt;&lt; funcB &lt;&lt; endl;    // 2.42</div></pre></td></tr></table></figure>\n<p>  这里用到了decltype(declared type)，它可以用来通过传入的参数来声明类型。这样func这个模板函数的会很方便的随着模板传入类型来自动改变返回值类型。bravo！</p>\n<p>  decltype不存在太多的歧义，这里直接列出代码。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">int declint = 10;</div><div class=\"line\">decltype(declint) declintt;</div><div class=\"line\"></div><div class=\"line\">vector&lt;int&gt; vec;</div><div class=\"line\">typedef decltype(vec.begin()) vectype;</div><div class=\"line\"></div><div class=\"line\">decltype(declint) temp1 = declint;</div><div class=\"line\">decltype((declint)) temp2 = declint; //decltype(())定义的是引用类型</div><div class=\"line\">decltype((declint)) temp3;    // error: ‘temp3’ declared as reference but not initialized</div></pre></td></tr></table></figure>\n<p>　　接下来我们说一下刚才我们提到的函数返回类型后置的问题。我们已经知道通过decltype可以根据传入参数获取最终的数据类型。那么我们将下面代码进行修改：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">// origin, ok~</div><div class=\"line\">template &lt;typename _Tx, typename _Ty&gt;</div><div class=\"line\">auto func(_Tx x, _Ty y) -&gt; decltype(x*y)</div><div class=\"line\">&#123;</div><div class=\"line\">    return x*y;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>　　一般想法是认为，返回值不就是decltype(x*y)类型么？　那我们直接放前面不是更方便。好的，我们改写一下.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// update</span></div><div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> _Tx, <span class=\"keyword\">typename</span> _Ty&gt;</div><div class=\"line\"><span class=\"keyword\">decltype</span>(x*y) func(_Tx x, _Ty y)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> x*y;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  然而：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">lennybai@lennybai:~/project/cpp11$ g++ main.cpp -std=c++11</div><div class=\"line\">main.cpp:16:10: error: ‘x’ was not declared <span class=\"keyword\">in</span> this scope</div><div class=\"line\"> decltype(x*y) func4(_Tx x, _Ty y)</div><div class=\"line\">          ^</div><div class=\"line\">main.cpp:16:10: error: ‘x’ was not declared <span class=\"keyword\">in</span> this scope</div><div class=\"line\">main.cpp:16:12: error: ‘y’ was not declared <span class=\"keyword\">in</span> this scope</div><div class=\"line\"> decltype(x*y) func4(_Tx x, _Ty y)</div><div class=\"line\">            ^</div></pre></td></tr></table></figure>\n<p>　　是的，结果就是这么神奇。这也说明　’function-&gt;expr‘ 中的expr是出现在函数之后的。如果不使用auto占位符，而直接使用decltype(x*y)声明函数类型。由于x,y在函数运行前尚未明确类型，所以这里就会出现编译错误。</p>\n<p>　　在这一小节最后需要指出的是，auto是不能作为参数占位符出现的。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 客官不可以哦</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func2</span><span class=\"params\">(<span class=\"keyword\">auto</span> x)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">     <span class=\"comment\">//do something</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"2-2-2-指针空值nullptr\"><a href=\"#2-2-2-指针空值nullptr\" class=\"headerlink\" title=\"2.2.2 指针空值nullptr\"></a>2.2.2 指针空值nullptr</h3><p>　　在传统c++中，通常使用NULL来标识空指针。NULL通常是一个与0相关的宏定义。这里是/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h中对NULL的定义。<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> defined (_STDDEF_H) || defined (__need_NULL)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">undef</span> NULL\t\t<span class=\"comment\">/* in case &lt;stdio.h&gt; has defined it. */</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> __GNUG__</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> NULL __null</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span>   <span class=\"comment\">/* G++ */</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> __cplusplus</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> NULL ((void *)0)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span>   <span class=\"comment\">/* C++ */</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> NULL 0</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span>  <span class=\"comment\">/* C++ */</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span>  <span class=\"comment\">/* G++ */</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span>\t<span class=\"comment\">/* NULL not defined and &lt;stddef.h&gt; or need NULL.  */</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">undef</span>\t__need_NULL</span></div></pre></td></tr></table></figure></p>\n<p>　　我们发现在传统C++中，NULL被定义为0。由于没有类型限制，它可以被强制转换为各种其他数据类型。最常见的例子就是当出现函数重载时会发生混乱。<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123; <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"call func(int n) : \"</span> &lt;&lt; <span class=\"built_in\">endl</span>; &#125;;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span> *p)</span> </span>&#123; <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"call func(int *p) : \"</span> &lt;&lt; <span class=\"built_in\">endl</span>; &#125;;</div><div class=\"line\"></div><div class=\"line\">func(<span class=\"literal\">NULL</span>); <span class=\"comment\">// error: call of overloaded ‘func(NULL)’ is ambiguous</span></div></pre></td></tr></table></figure></p>\n<p>　　为了区分不同类型的空指针，C++11引入了nullptr_t类型的指针空值nullptr。它可以自动隐性的转换为所需的成员指针或者函数指针的类型。从而使程序更加清晰明了。值得注意的是，nullptr只能用来标识指针类型。<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123; <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"call func(int n) : \"</span> &lt;&lt; <span class=\"built_in\">endl</span>; &#125;;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span> *p)</span> </span>&#123; <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"call func(int *p) : \"</span> &lt;&lt; <span class=\"built_in\">endl</span>; &#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> nIntNull = <span class=\"literal\">NULL</span>;        <span class=\"comment\">// ok</span></div><div class=\"line\">    <span class=\"keyword\">int</span> *pIntNull = <span class=\"literal\">NULL</span>;        <span class=\"comment\">// ok</span></div><div class=\"line\">    <span class=\"keyword\">int</span> *pIntNullptr = <span class=\"literal\">nullptr</span>;    <span class=\"comment\">// ok</span></div><div class=\"line\">    <span class=\"keyword\">int</span> nIntNullptr = <span class=\"literal\">nullptr</span>;    <span class=\"comment\">// error: cannot convert ‘std::nullptr_t’ to ‘int’ in initialization</span></div><div class=\"line\"></div><div class=\"line\">    func(<span class=\"literal\">NULL</span>); <span class=\"comment\">// error: call of overloaded ‘func(NULL)’ is ambiguous</span></div><div class=\"line\">    func(<span class=\"literal\">nullptr</span>); <span class=\"comment\">// call func(int *p)</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"2-2-3-常量区分符constexpr\"><a href=\"#2-2-3-常量区分符constexpr\" class=\"headerlink\" title=\"2.2.3 常量区分符constexpr\"></a>2.2.3 常量区分符constexpr</h3><p>　　常量表达式在c++中还是很常见的，特别是在数组或者容器等初始化时传入的大小通常为常量表达式。在C++中，常量表达式通常被解释为在编译时可以明确其值的表达式。最常见的常量表达式就是被const标识的变量：<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> n = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;<span class=\"keyword\">int</span>, n&gt; a1; <span class=\"comment\">// error, n is not a constant expression</span></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> cn = <span class=\"number\">2</span>;</div><div class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;<span class=\"keyword\">int</span>, cn&gt; a2; <span class=\"comment\">// OK, cn is a constant expression</span></div></pre></td></tr></table></figure></p>\n<p>　　其实，在我们进行程序设计的时候，常常会发现很多情况是需要根据运行情况去获取一个值，然后再进行数据或者容器大小的分配。而这些值我们在给定条件值之后，很容易就会被推导出来。而对于计算机来说，却需要在每次运行时不断重复相同的推倒工作。那么我们可能会觉得，如果可以像常量表达式那样在编译时就确定其值，是不是在运行时就可以得到更高的运行效率呢。c++为我们提供了常量区分符constexpr来实现这一效果。<br>　　constexpr用来标示一个变量或者函数为常量表达式，也是告诉编译器需要去验证它们是不是一个常量表达式。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">int x;</div><div class=\"line\">struct A &#123;</div><div class=\"line\">    constexpr A(bool b) : m(b?42:x) &#123; &#125;</div><div class=\"line\">    int m;</div><div class=\"line\">&#125;;</div><div class=\"line\">constexpr int v = A(true).m; // OK</div><div class=\"line\">constexpr int w = A(false).m; // error: non-const x</div><div class=\"line\">constexpr int mf = 20;          // 20是常量表达式</div><div class=\"line\">constexpr int limit = mf + 1;   // mf + 1是常量表达式</div><div class=\"line\">constexpr int sz = size();      // 只有当size是一个constexpr函数时才是一条正确的声明语句</div><div class=\"line\"></div><div class=\"line\">constexpr int A()</div><div class=\"line\">&#123;</div><div class=\"line\">    return 10;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">constexpr int fibonacci1(const int n) &#123;</div><div class=\"line\">    return n == 1 || n == 2 ? 1 : fibonacci1(n-1)+fibonacci1(n-2);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// c++11 error error: body of constexpr function ‘constexpr int fibonacci2(int)’ not a return-statement</div><div class=\"line\">// c++14 OK</div><div class=\"line\"> constexpr int fibonacci2(const int n) &#123;</div><div class=\"line\">     if(n == 1) return 1;</div><div class=\"line\">  　 if(n == 2) return 1;</div><div class=\"line\">  　 return fibonacci2(n-1)+fibonacci2(n-2);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">int i1 = 10;</div><div class=\"line\">const int i2 = i1;</div><div class=\"line\">const int i3 = 10;</div><div class=\"line\">constexpr int x1 = i1;    // error: the value of ‘i1’ is not usable in a constant expression</div><div class=\"line\">constexpr int x2 = i2;    // error: the value of ‘i2’ is not usable in a constant expression</div><div class=\"line\">constexpr int x3 = i3;    // ok</div><div class=\"line\">constexpr int x4 = 10;    // ok</div><div class=\"line\">constexpr int x5 = A();   // ok</div><div class=\"line\">constexpr int x6 = fibonacci1(10);    // ok</div><div class=\"line\">constexpr int x7 = cin.get(); // !error</div><div class=\"line\">constexpr int x8 = fibonacci2(10);</div><div class=\"line\"></div><div class=\"line\">int a[i2];    // ok</div><div class=\"line\">int b[x4];    // ok</div></pre></td></tr></table></figure></p>\n<p>　　从上面的代码中我们可以大概了解到constexpr的作用与用法。这里以上代码进行一些说明：</p>\n<ol>\n<li>c++11中对constexpr修饰的函数只能直接返回常量表达式。c++14中进行了增强，它可以支持局部变量和条件语句等。</li>\n<li><p>const int i2为运行时赋值，所以x2 = i2 报错； const int i3为常量表达式，所以x3=i3没问题</p>\n<p> 对于constexpr可以在这里<a href=\"http://cpptruths.blogspot.jp/2011/07/want-speed-use-constexpr-meta.html\" target=\"_blank\" rel=\"external\">了解更多</a>。</p>\n</li>\n</ol>\n<hr>\n<h3 id=\"2-2-4-range-based-for-loop\"><a href=\"#2-2-4-range-based-for-loop\" class=\"headerlink\" title=\"2.2.4 range-based for loop\"></a>2.2.4 range-based for loop</h3><p>　　在cppreference中，这个特性被描述为：</p>\n<blockquote>\n<p>Executes a for loop over a range.Used as a more readable equivalent to the traditional for loop operating over a range of values, such as all elements in a container.　　<br>　　这个描述有些官方和笼统。其实，range-based for loop在c++11中加入，它使得c++开始支持类似于’foreach’的范式格式。这种新格式使得我们获取或者操作数组时变得更容易，前提是我们不去关心索引，迭代器和数量的前提下。range-based　for loop可以支持迭代所有的c类型数组，初始化列表和重载了begin()和end()函数的容器。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; m;</div><div class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v;</div><div class=\"line\">    v.push_back(<span class=\"number\">1</span>);</div><div class=\"line\">    v.push_back(<span class=\"number\">2</span>);</div><div class=\"line\">    v.push_back(<span class=\"number\">3</span>);</div><div class=\"line\">    m[<span class=\"string\">\"my_vector\"</span>] = v;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span>&amp; tempM : m)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; tempM.first &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span>&amp; tempV : tempM.second)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; tempV &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> arr[] = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span>&amp; e : arr)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; e &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">        e = e*e;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span>&amp; e : arr)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; e &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">### <span class=\"number\">2.2</span><span class=\"number\">.5</span> 快速初始化列表</div><div class=\"line\">　　在c++<span class=\"number\">11</span>中，它提供了更便捷，或者说是更人性化的初始化方式。</div><div class=\"line\">```c++</div><div class=\"line\"><span class=\"comment\">//c++ 98 error: in C++98 ‘m’ must be initialized by constructor, not by ‘&#123;...&#125;’</span></div><div class=\"line\"><span class=\"comment\">//c++ 11</span></div><div class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;;</div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; v[<span class=\"number\">3</span>] &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//c++98 error: could not convert ‘&#123;&#123;1, 2&#125;&#125;’ from ‘&lt;brace-enclosed initializer list&gt;’ to ‘std::map&lt;int, int&gt;’</span></div><div class=\"line\"><span class=\"comment\">//c++11 ok</span></div><div class=\"line\"><span class=\"built_in\">map</span>&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; m = &#123;&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>&#125;&#125;;</div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; m[<span class=\"number\">1</span>] &lt;&lt; <span class=\"built_in\">endl</span>;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>  对于对象的内部属性初始化，我们可以通过调用参数为initializer_list的方法快速初始化。<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> myclass &#123;</div><div class=\"line\">  myclass (<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>);</div><div class=\"line\">  myclass (<span class=\"built_in\">initializer_list</span>&lt;<span class=\"keyword\">int</span>&gt;);</div><div class=\"line\">  <span class=\"comment\">/* definitions ... */</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">myclass foo &#123;<span class=\"number\">10</span>,<span class=\"number\">20</span>&#125;;  <span class=\"comment\">// calls initializer_list ctor</span></div><div class=\"line\"><span class=\"function\">myclass <span class=\"title\">bar</span> <span class=\"params\">(<span class=\"number\">10</span>,<span class=\"number\">20</span>)</span></span>;  <span class=\"comment\">// calls first constructor</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"3-参考文献\"><a href=\"#3-参考文献\" class=\"headerlink\" title=\"3 参考文献\"></a>3 参考文献</h1><ul>\n<li>[1]: <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4296.pdf\" target=\"_blank\" rel=\"external\">c++标准</a></li>\n<li>[2]: <a href=\"http://en.cppreference.com/w/cpp/types/NULL\" target=\"_blank\" rel=\"external\">cppreference</a></li>\n<li>[3]: <a href=\"http://www.codeproject.com/Articles/570638/Ten-Cplusplus-Features-Every-Cplusplus-Developer\" target=\"_blank\" rel=\"external\">Ten C++11 Features Every C++ Developer Should Use</a></li>\n</ul>\n","excerpt":"<h1 id=\"一、简介\"><a href=\"#一、简介\" class=\"headerlink\" title=\"一、简介\"></a>一、简介</h1><p>　　起草本文的目的主要有两点：第一点，在c++11学习的过程中做一些摘要总结，尽量取其精华，为自己梳理出来一个比较清晰的记忆脉络；第二点，不得不说的就是随着年纪的增长，记忆力也开始变得并不那么可靠，做些记录，定期回头看看总是好的。<br>　　文章会对c++11（其实是c++1x更准确些）的背景进行简要的概述，并尽量详细且准确的阐述c++11的新的特性。共同学习，不断进步。</p>\n<h2 id=\"1-1-c-11概述\"><a href=\"#1-1-c-11概述\" class=\"headerlink\" title=\"1.1 c++11概述\"></a>1.1 c++11概述</h2><p>　　我们生活中常常谈论的c++更多的是指传统c++，又或是可以称为c++98的版本。c++11也并不是什么神秘的新语言，而是基于传统c++发布13年后的第一次重大修订。它主要基于现在软件行业发展的新需求与新诉求进行的一种调整——增加新特性并弃用部分特性。</p>","more":"<h2 id=\"1-2-文章小贴士\"><a href=\"#1-2-文章小贴士\" class=\"headerlink\" title=\"1.2 文章小贴士\"></a>1.2 文章小贴士</h2><h3 id=\"1-2-1-笔者开发运行环境\"><a href=\"#1-2-1-笔者开发运行环境\" class=\"headerlink\" title=\"1.2.1 笔者开发运行环境\"></a>1.2.1 笔者开发运行环境</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; lennybai@lennybai~$ lsb_release <span class=\"_\">-a</span></div><div class=\"line\">&gt; No LSB modules are available.</div><div class=\"line\">&gt; Distributor ID:\tUbuntu</div><div class=\"line\">&gt; Description:\tUbuntu 16.04.1 LTS</div><div class=\"line\">&gt; Release:\t16.04</div><div class=\"line\">&gt; Codename:\txenial</div><div class=\"line\"></div><div class=\"line\">&gt; lennybai@lennybai:~$ g++ --version</div><div class=\"line\">&gt; g++ (Ubuntu 5.4.0-6ubuntu1~16.04.4) 5.4.0 20160609</div><div class=\"line\">&gt; Copyright (C) 2015 Free Software Foundation, Inc.</div><div class=\"line\">&gt; This is free software; see the <span class=\"built_in\">source</span> <span class=\"keyword\">for</span> copying conditions.  There is NO</div><div class=\"line\">warranty; not even <span class=\"keyword\">for</span> MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</div></pre></td></tr></table></figure>\n<h3 id=\"1-2-2-小贴士\"><a href=\"#1-2-2-小贴士\" class=\"headerlink\" title=\"1.2.2 小贴士\"></a>1.2.2 小贴士</h3><blockquote>\n<p>g++ main.cpp -std=c++11　　</p>\n</blockquote>\n<p>若使用c++11，请记得添加编译选项</p>\n<h3 id=\"1-2-3-原创提醒\"><a href=\"#1-2-3-原创提醒\" class=\"headerlink\" title=\"1.2.3 原创提醒\"></a>1.2.3 原创提醒</h3><p>　　本文主要目的在于个人学习与记录，如果能够有幸帮助到同样在修行的同僚那自然是件幸事，引用还望注明出处。笔者在写作过程中也会大量的阅读各种文章以增强理解，当然，会尽最大可能去注明文章引用，如果存在问题，希望指正。</p>\n<hr>\n<h1 id=\"二、正篇\"><a href=\"#二、正篇\" class=\"headerlink\" title=\"二、正篇\"></a>二、正篇</h1><p>　　对于学习新东西，我的习惯一般都是先google或者baidu看大量的博客来给自己洗脑，让自己有一定的知识轮廓。接下来就会开始啃官方文档，或者阅读刚刚浏览过的博客中推荐的各种书籍。当然，如果有个不错的视频教程让自己快进着点一点最好不过了，很多效果一目了然。</p>\n<p>　　在stackoverflow上，有人给出了不错的<a href=\"http://stackoverflow.com/a/388282\">书籍大纲</a>，这些对于积累知识的初学者更有益。对于那些对于传统c++已经很熟悉，只是希望快速的了解c++11的新特性，并择机使用的选手来说，实验楼的<a href=\"https://www.shiyanlou.com/courses/605/labs/2022/document\">《C++ 11/14 高速上手教程》</a>免费在线课程可能会更有帮助。</p>\n<p>　　本文主要基于实验楼的课程大纲进行整理，并进行部分知识点的拓展完善。</p>\n<h2 id=\"2-1-弃用-deprecated-特性\"><a href=\"#2-1-弃用-deprecated-特性\" class=\"headerlink\" title=\"2.1 弃用(deprecated)特性\"></a>2.1 弃用(deprecated)特性</h2><p>　　c++11提及到部分弃用特性。这里弃用并不等于废除并从标准中移除，而是警醒程序员在使用c++的时候能够意识到某些特性应避免使用。其实可能为了保证兼容性，这些特性可能永远不会被剔除出去（通常情况下是在编译的时，会显示一个弃用的warning），依旧可以被使用。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">lennybai@lennybai:~/Desktop/cpp11$ g++ main.cpp -std=c++11</div><div class=\"line\">main.cpp: In <span class=\"keyword\">function</span> ‘int main()’:</div><div class=\"line\">main.cpp:7:15: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]</div><div class=\"line\">     char* a = <span class=\"string\">\"hello world\"</span>;</div></pre></td></tr></table></figure></p>\n<p>　　但是我们应该尽量遵循语言的发展与变迁，适当的改变自己对语言的使用方式。一个不恰当的例子，就好比黑白彩电置于当今社会，依然可以被使用，但是有更好的选择时为什么不去尝试呢？</p>\n<h3 id=\"2-1-1-被移除或者弃用的特性\"><a href=\"#2-1-1-被移除或者弃用的特性\" class=\"headerlink\" title=\"2.1.1 被移除或者弃用的特性\"></a>2.1.1 被移除或者弃用的特性</h3><blockquote>\n<ul>\n<li>std::auto_ptr 被 std::unique_ptr 取代。</li>\n<li>exception specifications</li>\n<li>bool 类型的 ++ 操作被弃用。</li>\n<li>export: 用法已被去掉,但关键字还是被保留了,给将来可能的特性使用</li>\n<li>函数对象的基类(std::unary_function, std::binary_function)、函数指针适配器、类型成员指针适配器以及绑定器 (binder)。</li>\n<li><a href=\"http://www.cnblogs.com/dolphin0520/archive/2011/04/20/2022330.html\">顺序点</a> (sequence point): 这个术语正被更为易懂的描述所取代。一个运算可以发生 (is sequenced before) 在另一个运算之前; 又或者两个运算彼此之间没有顺序关系 (are unsequenced)。</li>\n</ul>\n</blockquote>\n<p>　　就像前面提到的，被弃用的特性应该引起一定的重视。这里主要参考维基百科上面提到的内容列出了一些已经被弃用的特性。在以后的学习过程中也会不断完善这一部分。</p>\n<h2 id=\"2-2-新特性\"><a href=\"#2-2-新特性\" class=\"headerlink\" title=\"2.2 新特性\"></a>2.2 新特性</h2><p>　　对于c++11的新特性应该是阅读本文的客官们更关心的。c++11新特性包括但不完全是：lambda表达式，类型推断关键字auto、decltype和对模板的大量改进。在这一章节我们进行详细阐述。</p>\n<h3 id=\"2-2-1-自动类型推断（auto-decltype）\"><a href=\"#2-2-1-自动类型推断（auto-decltype）\" class=\"headerlink\" title=\"2.2.1 自动类型推断（auto/decltype）\"></a>2.2.1 自动类型推断（auto/decltype）</h3><p>　　对于传统c++而言，变量的类型都必须明确定义。虽然已经习惯传统c++编程的朋友们在声明或者定义基本类型(如int、char等)的变量时，并没有太多不妥的感觉。然而，可能也会在使用复杂模板时，觉得代码有点又丑又长。比如常见的迭代器声明:<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> ( <span class=\"built_in\">map</span> &lt; <span class=\"keyword\">int</span>,UserDefClass&lt;userDefTemptype&gt; &gt;::iterator itr= userMap.begin(); itr !=userMap.end(); ++itr)</div></pre></td></tr></table></figure></p>\n<p>　　这里我列出了一个比较夸张的例子，目的是希望指出自动类型推断存在的意义。它其实已经很普遍的存在于现代编程语言之中(如python, javascript等脚本语言)。而在c++11中，通过对传统c++中auto关键字的修改得到自动类型推断的支持。<br>　　auto关键字在传统c++中用来指定存储期，一般用于指明具有自动生命周期的变量。最常见的就是函数内的局部变量。编译器在做编译时，对一般不是static修饰的变量，则默认赋予auto类型，所以auto关键字几乎很少被使用。在传统c++中，auto关键字的使用方法如下：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">auto</span> <span class=\"keyword\">int</span> a;</div></pre></td></tr></table></figure></p>\n<p>　　而在c++11中，auto的功能变为了类型自动推断,编译器会根据初始代码推断所声明变量的真实类型。将类型判断的工作由程序员交给了编译器，这样，在一定程度提高了代码开发的效率。而且，大部分情况下会直观的发现，代码变的更简短(当然int类型还是要比auto少一个字符)。这里是使用auto对上面繁重代码的优化:<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> ( <span class=\"keyword\">auto</span> itr= userMap.begin(); itr !=userMap.end(); ++itr)</div></pre></td></tr></table></figure></p>\n<p>　　有没有很酷！接下来我们来看一下auto的具体使用，来更详细的了解一下它的功能。同时，也要学习一下它的使用规则。auto在c++11中，最容易理解的使用方式莫过于变量定义时的类型推断:<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">auto</span> a = <span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"keyword\">auto</span> b = <span class=\"string\">'A'</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">c</span><span class=\"params\">(<span class=\"string\">\"hello\"</span>)</span></span>;</div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"a:\"</span> &lt;&lt; <span class=\"keyword\">typeid</span>(a).name() &lt;&lt; <span class=\"built_in\">endl</span>;    　<span class=\"comment\">// “a:i”</span></div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"b:\"</span> &lt;&lt; <span class=\"keyword\">typeid</span>(b).name() &lt;&lt; <span class=\"built_in\">endl</span>;    　<span class=\"comment\">// \"b:c\"</span></div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"c:\"</span> &lt;&lt; <span class=\"keyword\">typeid</span>(c).name() &lt;&lt; <span class=\"built_in\">endl</span>;    　<span class=\"comment\">// \"c:PKc\"</span></div></pre></td></tr></table></figure></p>\n<p>　　这里我们可以看到，对于变量可以不用明确的去定义其类型，而是用auto代替。其最终效果与传统c++的变量定义效果没有差别。这里可以通过typeid函数进行验证(#include&lt; typeinfo &gt;).<br>　　在很多对于auto的讲解中，它常常被称作占位符。所谓占位符，我的理解是它不能像数据类型那样去声明一个变量。所以使用auto的变量必须进行初始化。理所当然的，也就不能使用c++类型转化将变量转换为auto类型。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">auto</span> a;         <span class=\"comment\">//error: declaration of ‘auto a’ has no initializer</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> value1 = <span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"keyword\">auto</span> value2 = (<span class=\"keyword\">auto</span>)value1;    <span class=\"comment\">// error: invalid use of ‘auto’</span></div><div class=\"line\"><span class=\"keyword\">auto</span> value3 = <span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">auto</span>&gt;(value１);    <span class=\"comment\">// error: invalid use of ‘auto’</span></div></pre></td></tr></table></figure></p>\n<p>　　c++11已经彻底废弃了原有auto的使用方式，如代码所示:<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">auto</span> <span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;  <span class=\"comment\">//error: two or more data types in declaration of ‘a’</span></div></pre></td></tr></table></figure></p>\n<p>　　auto可以接受c++的变量名表列的方式定义多个变量，但所有变量应具有相同的数据类型。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">auto</span> a1=<span class=\"number\">10</span>, a2=<span class=\"number\">20</span>, a3=<span class=\"number\">30</span>;</div><div class=\"line\"><span class=\"keyword\">auto</span> a4=<span class=\"number\">10</span>, a5=<span class=\"number\">20.0</span>, a6 = <span class=\"string\">'A'</span>;    <span class=\"comment\">// error: conflicting declaration</span></div></pre></td></tr></table></figure></p>\n<p>　　auto在初始化时，会自动去除引用、const、volatile的语意。这种说法可能很难理解。其实就是如果原始变量为引用、const、volatile类型，auto初始化时需要自行指明。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> refa = <span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> &amp;refb = refa;</div><div class=\"line\"><span class=\"keyword\">auto</span> refc = refb;</div><div class=\"line\"><span class=\"keyword\">auto</span> &amp;refd = refb;</div><div class=\"line\">refa = <span class=\"number\">100</span>;</div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"refa: \"</span> &lt;&lt; <span class=\"keyword\">typeid</span>(refa).name() &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; refa &lt;&lt; <span class=\"built_in\">endl</span>;    <span class=\"comment\">// 100</span></div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"refb: \"</span> &lt;&lt; <span class=\"keyword\">typeid</span>(refb).name() &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; refb &lt;&lt; <span class=\"built_in\">endl</span>;    <span class=\"comment\">// 100</span></div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"refc: \"</span> &lt;&lt; <span class=\"keyword\">typeid</span>(refc).name() &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; refc &lt;&lt; <span class=\"built_in\">endl</span>;    <span class=\"comment\">// 10</span></div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"refd: \"</span> &lt;&lt; <span class=\"keyword\">typeid</span>(refd).name() &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; refd &lt;&lt; <span class=\"built_in\">endl</span>;    <span class=\"comment\">// 100</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> arrA[<span class=\"number\">3</span>] = &#123; <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span> &#125;;</div><div class=\"line\"><span class=\"keyword\">auto</span> arrB = arrA;</div><div class=\"line\"><span class=\"keyword\">auto</span> &amp;refArrB = arrA;</div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"arrA: \"</span> &lt;&lt; <span class=\"keyword\">typeid</span>(arrA).name() &lt;&lt; <span class=\"built_in\">endl</span>;    <span class=\"comment\">// A3_i</span></div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"arrB: \"</span> &lt;&lt; <span class=\"keyword\">typeid</span>(arrB).name() &lt;&lt; <span class=\"built_in\">endl</span>;    <span class=\"comment\">//Pi</span></div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"refArrB: \"</span> &lt;&lt; <span class=\"keyword\">typeid</span>(refArrB).name() &lt;&lt; <span class=\"built_in\">endl</span>;    <span class=\"comment\">// A3_i</span></div></pre></td></tr></table></figure></p>\n<p>　　auto关键字不仅可以配合变量使用，它在对传统c++函数的代码优化上也可以说是大放异彩。特别是针对那些具有模板类型的函数，更是让我们在编写时变的简单高效。我们来看第一个例子。这里我们在模板函数中使用auto定义了一个站位变量。这样就使得该变量在随着传入值的类型发生变化时，自动进行类型转换。是不是很方便。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> _Tx,<span class=\"keyword\">typename</span> _Ty&gt;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(_Tx x, _Ty y)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">auto</span> v = x*y;</div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; v &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//call func</span></div><div class=\"line\">func3(<span class=\"number\">1</span>,<span class=\"number\">2</span>);    <span class=\"comment\">// 2</span></div><div class=\"line\">func3(<span class=\"number\">1.1</span>,<span class=\"number\">2.2</span>);    <span class=\"comment\">// 2.42</span></div></pre></td></tr></table></figure></p>\n<p>　　auto关键字可以在函数中使用，那我们自然会想到，它能不能作为函数的返回值占位符。c++11自然提供了这种机制。但是用法可能和我们预期有一定的差距。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">auto func(int x, int y)-&gt;int</div><div class=\"line\">&#123;</div><div class=\"line\">    return x+y;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>　　在c++11中，这样的返回值看起来很奇葩。使用auto来标注函数返回值时，还需要在末尾指定返回类型。会不会觉得还不如不用auto类型。但我觉得制定标准的人肯定也会考虑到这个问题。自然就去搜索了一些相关内容:</p>\n<ol>\n<li>在函数返回值特别长的时候放在末尾，会显得好看。</li>\n<li>c++14会把返回值去掉，让编译器直接支持自动推倒（c++14确实是做到了）</li>\n<li>出现在函数后面的表达式在代码编译时也是出现在函数之后的，这就使得很多函数中的临时变量可以出现在这个表达式中。这个我们在后面的decltype使用中可以看到效果。(显然，这个才是我认为最重要的)</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//c++14　支持</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> x+y;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>　　这种auto作为函数返回值占位符的用法，会使编写复杂的模板函数时变得相当简单和灵活。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">template &lt;typename _Tx, typename _Ty&gt;</div><div class=\"line\">auto func(_Tx x, _Ty y) -&gt; decltype(x*y)</div><div class=\"line\">&#123;</div><div class=\"line\">    return x*y;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//call func</div><div class=\"line\">auto funcA = func(1,2);</div><div class=\"line\">cout &lt;&lt; funcA &lt;&lt; endl;    // 2</div><div class=\"line\">funcA = func(1.1,2.2);</div><div class=\"line\">cout &lt;&lt; funcA &lt;&lt; endl;    // 2</div><div class=\"line\">auto funcB = func(1.1,2.2);</div><div class=\"line\">cout &lt;&lt; funcB &lt;&lt; endl;    // 2.42</div></pre></td></tr></table></figure>\n<p>  这里用到了decltype(declared type)，它可以用来通过传入的参数来声明类型。这样func这个模板函数的会很方便的随着模板传入类型来自动改变返回值类型。bravo！</p>\n<p>  decltype不存在太多的歧义，这里直接列出代码。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">int declint = 10;</div><div class=\"line\">decltype(declint) declintt;</div><div class=\"line\"></div><div class=\"line\">vector&lt;int&gt; vec;</div><div class=\"line\">typedef decltype(vec.begin()) vectype;</div><div class=\"line\"></div><div class=\"line\">decltype(declint) temp1 = declint;</div><div class=\"line\">decltype((declint)) temp2 = declint; //decltype(())定义的是引用类型</div><div class=\"line\">decltype((declint)) temp3;    // error: ‘temp3’ declared as reference but not initialized</div></pre></td></tr></table></figure>\n<p>　　接下来我们说一下刚才我们提到的函数返回类型后置的问题。我们已经知道通过decltype可以根据传入参数获取最终的数据类型。那么我们将下面代码进行修改：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">// origin, ok~</div><div class=\"line\">template &lt;typename _Tx, typename _Ty&gt;</div><div class=\"line\">auto func(_Tx x, _Ty y) -&gt; decltype(x*y)</div><div class=\"line\">&#123;</div><div class=\"line\">    return x*y;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>　　一般想法是认为，返回值不就是decltype(x*y)类型么？　那我们直接放前面不是更方便。好的，我们改写一下.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// update</span></div><div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> _Tx, <span class=\"keyword\">typename</span> _Ty&gt;</div><div class=\"line\"><span class=\"keyword\">decltype</span>(x*y) func(_Tx x, _Ty y)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> x*y;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  然而：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">lennybai@lennybai:~/project/cpp11$ g++ main.cpp -std=c++11</div><div class=\"line\">main.cpp:16:10: error: ‘x’ was not declared <span class=\"keyword\">in</span> this scope</div><div class=\"line\"> decltype(x*y) func4(_Tx x, _Ty y)</div><div class=\"line\">          ^</div><div class=\"line\">main.cpp:16:10: error: ‘x’ was not declared <span class=\"keyword\">in</span> this scope</div><div class=\"line\">main.cpp:16:12: error: ‘y’ was not declared <span class=\"keyword\">in</span> this scope</div><div class=\"line\"> decltype(x*y) func4(_Tx x, _Ty y)</div><div class=\"line\">            ^</div></pre></td></tr></table></figure>\n<p>　　是的，结果就是这么神奇。这也说明　’function-&gt;expr‘ 中的expr是出现在函数之后的。如果不使用auto占位符，而直接使用decltype(x*y)声明函数类型。由于x,y在函数运行前尚未明确类型，所以这里就会出现编译错误。</p>\n<p>　　在这一小节最后需要指出的是，auto是不能作为参数占位符出现的。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 客官不可以哦</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func2</span><span class=\"params\">(<span class=\"keyword\">auto</span> x)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">     <span class=\"comment\">//do something</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"2-2-2-指针空值nullptr\"><a href=\"#2-2-2-指针空值nullptr\" class=\"headerlink\" title=\"2.2.2 指针空值nullptr\"></a>2.2.2 指针空值nullptr</h3><p>　　在传统c++中，通常使用NULL来标识空指针。NULL通常是一个与0相关的宏定义。这里是/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h中对NULL的定义。<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> defined (_STDDEF_H) || defined (__need_NULL)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">undef</span> NULL\t\t<span class=\"comment\">/* in case &lt;stdio.h&gt; has defined it. */</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> __GNUG__</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> NULL __null</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span>   <span class=\"comment\">/* G++ */</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> __cplusplus</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> NULL ((void *)0)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span>   <span class=\"comment\">/* C++ */</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> NULL 0</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span>  <span class=\"comment\">/* C++ */</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span>  <span class=\"comment\">/* G++ */</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span>\t<span class=\"comment\">/* NULL not defined and &lt;stddef.h&gt; or need NULL.  */</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">undef</span>\t__need_NULL</span></div></pre></td></tr></table></figure></p>\n<p>　　我们发现在传统C++中，NULL被定义为0。由于没有类型限制，它可以被强制转换为各种其他数据类型。最常见的例子就是当出现函数重载时会发生混乱。<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123; <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"call func(int n) : \"</span> &lt;&lt; <span class=\"built_in\">endl</span>; &#125;;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span> *p)</span> </span>&#123; <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"call func(int *p) : \"</span> &lt;&lt; <span class=\"built_in\">endl</span>; &#125;;</div><div class=\"line\"></div><div class=\"line\">func(<span class=\"literal\">NULL</span>); <span class=\"comment\">// error: call of overloaded ‘func(NULL)’ is ambiguous</span></div></pre></td></tr></table></figure></p>\n<p>　　为了区分不同类型的空指针，C++11引入了nullptr_t类型的指针空值nullptr。它可以自动隐性的转换为所需的成员指针或者函数指针的类型。从而使程序更加清晰明了。值得注意的是，nullptr只能用来标识指针类型。<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123; <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"call func(int n) : \"</span> &lt;&lt; <span class=\"built_in\">endl</span>; &#125;;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span> *p)</span> </span>&#123; <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"call func(int *p) : \"</span> &lt;&lt; <span class=\"built_in\">endl</span>; &#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> nIntNull = <span class=\"literal\">NULL</span>;        <span class=\"comment\">// ok</span></div><div class=\"line\">    <span class=\"keyword\">int</span> *pIntNull = <span class=\"literal\">NULL</span>;        <span class=\"comment\">// ok</span></div><div class=\"line\">    <span class=\"keyword\">int</span> *pIntNullptr = <span class=\"literal\">nullptr</span>;    <span class=\"comment\">// ok</span></div><div class=\"line\">    <span class=\"keyword\">int</span> nIntNullptr = <span class=\"literal\">nullptr</span>;    <span class=\"comment\">// error: cannot convert ‘std::nullptr_t’ to ‘int’ in initialization</span></div><div class=\"line\"></div><div class=\"line\">    func(<span class=\"literal\">NULL</span>); <span class=\"comment\">// error: call of overloaded ‘func(NULL)’ is ambiguous</span></div><div class=\"line\">    func(<span class=\"literal\">nullptr</span>); <span class=\"comment\">// call func(int *p)</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"2-2-3-常量区分符constexpr\"><a href=\"#2-2-3-常量区分符constexpr\" class=\"headerlink\" title=\"2.2.3 常量区分符constexpr\"></a>2.2.3 常量区分符constexpr</h3><p>　　常量表达式在c++中还是很常见的，特别是在数组或者容器等初始化时传入的大小通常为常量表达式。在C++中，常量表达式通常被解释为在编译时可以明确其值的表达式。最常见的常量表达式就是被const标识的变量：<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> n = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;<span class=\"keyword\">int</span>, n&gt; a1; <span class=\"comment\">// error, n is not a constant expression</span></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> cn = <span class=\"number\">2</span>;</div><div class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;<span class=\"keyword\">int</span>, cn&gt; a2; <span class=\"comment\">// OK, cn is a constant expression</span></div></pre></td></tr></table></figure></p>\n<p>　　其实，在我们进行程序设计的时候，常常会发现很多情况是需要根据运行情况去获取一个值，然后再进行数据或者容器大小的分配。而这些值我们在给定条件值之后，很容易就会被推导出来。而对于计算机来说，却需要在每次运行时不断重复相同的推倒工作。那么我们可能会觉得，如果可以像常量表达式那样在编译时就确定其值，是不是在运行时就可以得到更高的运行效率呢。c++为我们提供了常量区分符constexpr来实现这一效果。<br>　　constexpr用来标示一个变量或者函数为常量表达式，也是告诉编译器需要去验证它们是不是一个常量表达式。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">int x;</div><div class=\"line\">struct A &#123;</div><div class=\"line\">    constexpr A(bool b) : m(b?42:x) &#123; &#125;</div><div class=\"line\">    int m;</div><div class=\"line\">&#125;;</div><div class=\"line\">constexpr int v = A(true).m; // OK</div><div class=\"line\">constexpr int w = A(false).m; // error: non-const x</div><div class=\"line\">constexpr int mf = 20;          // 20是常量表达式</div><div class=\"line\">constexpr int limit = mf + 1;   // mf + 1是常量表达式</div><div class=\"line\">constexpr int sz = size();      // 只有当size是一个constexpr函数时才是一条正确的声明语句</div><div class=\"line\"></div><div class=\"line\">constexpr int A()</div><div class=\"line\">&#123;</div><div class=\"line\">    return 10;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">constexpr int fibonacci1(const int n) &#123;</div><div class=\"line\">    return n == 1 || n == 2 ? 1 : fibonacci1(n-1)+fibonacci1(n-2);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// c++11 error error: body of constexpr function ‘constexpr int fibonacci2(int)’ not a return-statement</div><div class=\"line\">// c++14 OK</div><div class=\"line\"> constexpr int fibonacci2(const int n) &#123;</div><div class=\"line\">     if(n == 1) return 1;</div><div class=\"line\">  　 if(n == 2) return 1;</div><div class=\"line\">  　 return fibonacci2(n-1)+fibonacci2(n-2);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">int i1 = 10;</div><div class=\"line\">const int i2 = i1;</div><div class=\"line\">const int i3 = 10;</div><div class=\"line\">constexpr int x1 = i1;    // error: the value of ‘i1’ is not usable in a constant expression</div><div class=\"line\">constexpr int x2 = i2;    // error: the value of ‘i2’ is not usable in a constant expression</div><div class=\"line\">constexpr int x3 = i3;    // ok</div><div class=\"line\">constexpr int x4 = 10;    // ok</div><div class=\"line\">constexpr int x5 = A();   // ok</div><div class=\"line\">constexpr int x6 = fibonacci1(10);    // ok</div><div class=\"line\">constexpr int x7 = cin.get(); // !error</div><div class=\"line\">constexpr int x8 = fibonacci2(10);</div><div class=\"line\"></div><div class=\"line\">int a[i2];    // ok</div><div class=\"line\">int b[x4];    // ok</div></pre></td></tr></table></figure></p>\n<p>　　从上面的代码中我们可以大概了解到constexpr的作用与用法。这里以上代码进行一些说明：</p>\n<ol>\n<li>c++11中对constexpr修饰的函数只能直接返回常量表达式。c++14中进行了增强，它可以支持局部变量和条件语句等。</li>\n<li><p>const int i2为运行时赋值，所以x2 = i2 报错； const int i3为常量表达式，所以x3=i3没问题</p>\n<p> 对于constexpr可以在这里<a href=\"http://cpptruths.blogspot.jp/2011/07/want-speed-use-constexpr-meta.html\">了解更多</a>。</p>\n</li>\n</ol>\n<hr>\n<h3 id=\"2-2-4-range-based-for-loop\"><a href=\"#2-2-4-range-based-for-loop\" class=\"headerlink\" title=\"2.2.4 range-based for loop\"></a>2.2.4 range-based for loop</h3><p>　　在cppreference中，这个特性被描述为：</p>\n<blockquote>\n<p>Executes a for loop over a range.Used as a more readable equivalent to the traditional for loop operating over a range of values, such as all elements in a container.　　<br>　　这个描述有些官方和笼统。其实，range-based for loop在c++11中加入，它使得c++开始支持类似于’foreach’的范式格式。这种新格式使得我们获取或者操作数组时变得更容易，前提是我们不去关心索引，迭代器和数量的前提下。range-based　for loop可以支持迭代所有的c类型数组，初始化列表和重载了begin()和end()函数的容器。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"built_in\">map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; m;</div><div class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v;</div><div class=\"line\">    v.push_back(<span class=\"number\">1</span>);</div><div class=\"line\">    v.push_back(<span class=\"number\">2</span>);</div><div class=\"line\">    v.push_back(<span class=\"number\">3</span>);</div><div class=\"line\">    m[<span class=\"string\">\"my_vector\"</span>] = v;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span>&amp; tempM : m)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; tempM.first &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span>&amp; tempV : tempM.second)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; tempV &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> arr[] = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span>&amp; e : arr)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; e &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">        e = e*e;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span>&amp; e : arr)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; e &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">### <span class=\"number\">2.2</span><span class=\"number\">.5</span> 快速初始化列表</div><div class=\"line\">　　在c++<span class=\"number\">11</span>中，它提供了更便捷，或者说是更人性化的初始化方式。</div><div class=\"line\">```c++</div><div class=\"line\"><span class=\"comment\">//c++ 98 error: in C++98 ‘m’ must be initialized by constructor, not by ‘&#123;...&#125;’</span></div><div class=\"line\"><span class=\"comment\">//c++ 11</span></div><div class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;;</div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; v[<span class=\"number\">3</span>] &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//c++98 error: could not convert ‘&#123;&#123;1, 2&#125;&#125;’ from ‘&lt;brace-enclosed initializer list&gt;’ to ‘std::map&lt;int, int&gt;’</span></div><div class=\"line\"><span class=\"comment\">//c++11 ok</span></div><div class=\"line\"><span class=\"built_in\">map</span>&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; m = &#123;&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>&#125;&#125;;</div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; m[<span class=\"number\">1</span>] &lt;&lt; <span class=\"built_in\">endl</span>;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>  对于对象的内部属性初始化，我们可以通过调用参数为initializer_list的方法快速初始化。<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> myclass &#123;</div><div class=\"line\">  myclass (<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>);</div><div class=\"line\">  myclass (<span class=\"built_in\">initializer_list</span>&lt;<span class=\"keyword\">int</span>&gt;);</div><div class=\"line\">  <span class=\"comment\">/* definitions ... */</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">myclass foo &#123;<span class=\"number\">10</span>,<span class=\"number\">20</span>&#125;;  <span class=\"comment\">// calls initializer_list ctor</span></div><div class=\"line\"><span class=\"function\">myclass <span class=\"title\">bar</span> <span class=\"params\">(<span class=\"number\">10</span>,<span class=\"number\">20</span>)</span></span>;  <span class=\"comment\">// calls first constructor</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"3-参考文献\"><a href=\"#3-参考文献\" class=\"headerlink\" title=\"3 参考文献\"></a>3 参考文献</h1><ul>\n<li>[1]: <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4296.pdf\">c++标准</a></li>\n<li>[2]: <a href=\"http://en.cppreference.com/w/cpp/types/NULL\">cppreference</a></li>\n<li>[3]: <a href=\"http://www.codeproject.com/Articles/570638/Ten-Cplusplus-Features-Every-Cplusplus-Developer\">Ten C++11 Features Every C++ Developer Should Use</a></li>\n</ul>"}],"PostAsset":[],"PostCategory":[{"post_id":"civnaj76w0001n9ou1ay5b7l1","category_id":"civnaj77f0004n9ouq8v5uujd","_id":"civnaj77r000bn9ouzppcu8v5"},{"post_id":"civnaj76w0001n9ou1ay5b7l1","category_id":"civnaj77n0008n9ouluviz5kj","_id":"civnaj77u000cn9oufleb81ai"}],"PostTag":[{"post_id":"civnaj76w0001n9ou1ay5b7l1","tag_id":"civnaj77h0005n9ouvyqs8f29","_id":"civnaj77q0009n9ourhkn2ku5"},{"post_id":"civnaj76w0001n9ou1ay5b7l1","tag_id":"civnaj77k0007n9ou48zkeoky","_id":"civnaj77q000an9oulrbnmz74"}],"Tag":[{"name":"编程","_id":"civnaj77h0005n9ouvyqs8f29"},{"name":"c++11","_id":"civnaj77k0007n9ou48zkeoky"}]}}